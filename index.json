[{"categories":["人间烟火"],"contents":"非常时期的总结，以及对不可知未来的准备。\n两个成年人所需基本食物存储（可一个季度或半年盘点一次）：\n一、饮品  咖啡豆：10斤 （可供6个月） 茶叶：绿茶、岩茶，共3斤 （可供6个月） 牛奶：鲜牛奶，20升；奶粉 4斤； （可供3个月，非常时期可供6个月）  二、肉类  鸡肉：鸡胸肉、鸡腿肉，共24斤 （可供 2个月，非常时期可供4个月） 鱼肉：各种鱼类，鲳鱼、鲈鱼、舌鳎鱼，以海鱼为主，共16斤 （可供 2个月，非常时期可供4个月） 蛋：鸡蛋、咸鸭蛋，5斤（可供2个月，非常时期可供4个月）  三、蔬菜类  过水绿叶菜：太湖菜、油麦菜、西兰花、芹菜等，共12斤 （可供 1个月，非常时期可供2个月），需及时补货。 豆制品：豆腐、腐竹、干豆腐皮等，共10斤 （可供2个月，非常时期可供4个月）  四、主食类（汇总可供6个月以上）  面粉：20斤 面条：10斤 大米：40斤  五、水果类  苹果：16斤（可供2个月，非常时期可供4个月）  六、调料类  盐：5斤（可供6个月以上） 酱油：1.5升（可供3个月） 蚝油：1.5升（可供3个月） 糖：4斤（可供4个月，非常时期可供6个月）  以上这些是二人家庭在食品方面所需基本，以后的生活不要太为食物担忧。\n  本作品由 IvyWooo 采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，转载请注明出处。\n本文链接\n ","permalink":"https://deewooo.github.io/post/%E4%B8%A4%E4%BA%BA%E5%9F%BA%E6%9C%AC%E5%82%A8%E5%A4%87%E9%A3%9F%E5%93%81%E6%89%80%E9%9C%80%E6%B8%85%E5%8D%95/","tags":["封控","物资"],"title":"两人基本储备食品所需清单"},{"categories":["简单生长"],"contents":"网上查了下攻略，要把新买的iPhone手机设置的和原来的一模一样，基本有如下四种方法：\n方法一、隔空无线传输\n这个我最喜欢，因为懒啊。两台手机放一起，一次性无线传输完，10多分钟搞定，多爽。原来的手机用习惯了，希望原来手机里的资源、app、设置什么的，全部迁移到新手机，快一点，简单一点，这就是我想要的。\n方法二、用iCloud迁移\n麻烦。1、得先把旧手机数据传到iCloud，再用新手机把数据从iCloud上下下来，中间多了一个iCloud，麻烦。光把旧手机数据往iCloud的上传就得花个一小时，我累不累，放弃。2、苹果默认提供的iCloud的空间只有5G，完全不够啊，虽然可以临时借用，借用了是不是需要还或者关服务？我没尝试，放弃。\n方法三、使用有线连接从 iPhone 迁移数据。\n我没有这种数据线，放弃。\n方法四、用Mac等PC做媒介，用iTunes数据传输。\n麻烦。1、跟方法二一样，有一个中介，只不过中介由iCloud变成了电脑。2、2022，苹果正式宣布放弃iTunes，以三个独立APP取而代之，分别是播客、电视和音乐。也就是找不到iTunes了。具体怎么操作，想想就麻烦，放弃。\n嗯，方法一最适合我这种懒人，于是动手，尝(si)试(ke)。\n前期准备： 当前设备使用的是 iOS 12.4 或更高版本或者是 iPadOS 13.4，则“快速开始”中会提供使用设备间迁移的选项。这样可以通过无线方式将所有数据从当前设备传输到新设备。\n1、新旧手机的iOS版本都得在12.4以上。 2、两个手机的蓝牙和Wi-Fi都打开。 3、Wi-Fi在一个网络里最好。\n开始操作： 1、将新旧iPhone靠在一起（并排放在一起）,并始终保持Wi-Fi和蓝牙连接。当前iPhone会提示你可以用当前Apple ID来设置新设备，然后只管点继续按钮，\n第一步我就卡了，两个手机放一起就是没反应啊。哪里来的“快速开始”？？？找了好多攻略都没提到，网上攻略似乎就是一大抄。后来终于发现，这个隔空一键传输只适用于新手机未激活的状态。就是刚拆机，屏幕显示hello之后，从零开始设置里才会出现这个”快速开始“这个步骤。我的手机已经激活过了，连苹果账号都绑定了，就不会再出现”快速开始“了。呵呵，无言以对，但又实在是懒。那么，把新手机重新变成需要激活的状态不就行了。点击”设置“——\u0026gt;\u0026quot; 通用“——\u0026gt;最下面有个“传输与重置iPhone”——\u0026gt;“清除所有内容和设置”。OK, 新手机除了激活锁已经激活没法改，其他就变成一台新机，可以卖了（开玩笑哈）。\n2、然后从hello唤醒，从零开始，设置语言，地区，然后就出现了梦寐以求的”快速开始“提醒，问询是否要从旧手机迁移所有数据和设置到新手机，当然要啊。\n3、新的iPhone上出现的下图所示的动画（像一朵蓝色云雾，感觉很漂亮），先用旧iPhone手机扫一扫这朵“云雾”，然后在新手机上根据提示输入旧手机的屏幕密码。（也就是让新手机获得旧手机数据传输的授权）。\n 4、接下来都顺着提示操作就行。只需注意在“App与数据”界面，选择“直接从iPhone传输”，不要选其他选项。然后始终让两台手机靠近，它们就会开始隔空传输数据。大约20分钟，传输就能完成。实际我只花了8分钟，因为之前的6S是64G的，本来也不大。（我的6S用了7年多，到现在还是很好用的，感恩。）\n 好啦，搞定。除了一些振动之类的设置，还需要自己调，以及一些app需要更新，其他跟原来的手机简直一摸一样。满意。\n   本作品由 IvyWooo 采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，转载请注明出处。\n本文链接\n ","permalink":"https://deewooo.github.io/post/%E6%8A%8A%E6%97%A7iPhone-6S%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%80%E6%AC%A1%E8%BF%81%E7%A7%BB%E5%88%B0%E6%96%B0iPhone-14%E6%89%8B%E6%9C%BA%E6%97%A0%E7%BA%BF%E9%9A%94%E7%A9%BA%E4%BC%A0%E8%BE%93/","tags":["iphone14","iphone6s","数据迁移","土猫爪痕"],"title":"把旧iPhone 6S的数据一次迁移到新iPhone 14手机无线隔空传输"},{"categories":["技术"],"contents":"博客运行一段时间之后，有了一点点流量，随即向Google申请了Adsense，流量虽少也不想浪费。 如何申请就不多讲了，去Google Adsense官方一步一步照做就可以。这里主要说说，申请下来ID之后，如何在Hugo里配置相应的代码和ads.txt。\n配置广告代码 Hugo有很多主题，每个主题配置Adsense的方式可能不太一样，我的博客目前使用的是 Clean White 主题，下面介绍的就是如何在Clean White 主题中加入Adsense配置。\nAdsense 申请成功以后，会有一段广告代码，类似下面这种：\n\u0026lt;script async src=\u0026#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-592048404*******\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;/script\u0026gt; 上述代码中的一串数字谷歌分配的publisher ID，需要改成自己的ID。把这段代码放到/themes/hugo-theme-cleanwhite/layouts/partials/head.html文件里面，然后重新部署。 配置ads.txt 配好广告代码后，我们还需要确保ads.txt文件可以生成到网站的根目录。否则Adsense会发给你一段警告框，如下图。也可以从这里下载到自己的ID号对应的ads.txt文件。\n 关于如何放置ads.txt，我找了很多中文技术博文，都说的是把文件放在/public目录下就可以了，但这显然不适合我。正如前面系列博文所属，我的站点是利用Github Action发布成Github Pages的方式部署的。任何直接放到/public目录的方式都不可行。只能利用Hugo的生成机制，终于从主题目录中找到了办法。\nHugo允许自定义robots.txt，但不允许自定义ads.txt并且不可能通过layout模式来实现。那么，目前最好的替代方案，只能是将ads.txt文件放到主题目录下的static文件夹中。对于我的主题就是将ads.txt文件放到/themes/hugo-theme-cleanwhite/static路径下。\n这样，重新部署之后，就可以通过路径localhost:1313/ads.txt访问到ads.txt文件了。  参考文章  《谷歌 Adsense 申请及在 Hugo 中的配置》,https://jdhao.github.io/2019/09/22/google_adsense_hugo_config/ Hugo Adsense Ads Txt，https://rajasimon.io/blog/hugo-adsense-ads-txt/ Ads.txt guide, https://support.google.com/adsense/answer/7532444?hl=en Robots.txt File, https://gohugo.io/templates/robots/    本作品由 IvyWooo 采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，转载请注明出处。\n本文链接\n ","permalink":"https://deewooo.github.io/post/%E5%BB%BA%E7%AB%99%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AF%87-Google-Adsense%E5%9C%A8Hugo%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE/","tags":["建站","Hugo","Google Adsense"],"title":"建站第十五篇 Google Adsense在Hugo中的配置"},{"categories":["技术"],"contents":"手边常用的番茄工具有：滴答清单和专注清单。都不能支持自定义背景乐，而我又是网易云音乐的重度用户。一时不爽，索性用applescript+shell自己撸了个脚本。\n下面直接上代码 #!/bin/bash  killall NeteaseMusic # 倒计时5s echo kill 5 for i in {5..1} ; do echo $i sleep 1 done #打开 open /Applications/NeteaseMusic.app # 倒计时10s echo open 10 for i in {10..1} ; do echo $i sleep 1 done start=25 playtime=$(($start*60)) #计算工作时长 echo $playtime stop=5 pausetime=$(($stop*60)) #计算休息时长 echo $pausetime #默认4次循环 for((i=1;i\u0026lt;=4;i++)); do echo $i loop #播放或暂停，用applescript模拟键盘发送 osascript -e \u0026#39;tell application \u0026#34;System Events\u0026#34;\u0026#39; -e \u0026#39;key code {58, 55, 35}\u0026#39; -e \u0026#39;end tell\u0026#39; echo play ${start}min for j in $(seq $playtime 1) ; do echo $j sleep 1 done wait osascript -e \u0026#39;tell application \u0026#34;System Events\u0026#34;\u0026#39; -e \u0026#39;key code {58, 55, 35}\u0026#39; -e \u0026#39;end tell\u0026#39; echo pause ${stop}min for k in $(seq $pausetime 1) ; do echo $k sleep 1 done wait done 需要特别注意的地方  网易云音乐要选中\u0026quot;启用全局快捷键\u0026quot;，位于\u0026quot;设置\u0026quot;\u0026ndash;\u0026gt;\u0026ldquo;快捷键\u0026rdquo;  上图中\u0026quot;播放/暂停\u0026quot;的\u0026quot;全局快捷键\u0026quot;默认设置因为产生冲突，被我改成了图中的配置。相应的，脚本中的模拟按键代码也要随之变更，对应的代码对照表，放在下面。   可以扩展的其他玩法  可以用mac自带的\u0026quot;自动操作\u0026quot;生成一个应用程序； 可以把脚本中的番茄时间改成参数，调用sh脚本时，传递进去； 可以打开mac自带播放器，甚至指定播放列表 可以用两个不同的播放器切换 等等  总结 基本思路是利用applecript的模拟按键功能，控制app。 目前满足于自用，仅适用于mac环境。 记录一下。\n   本作品由 IvyWooo 采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，转载请注明出处。 本文链接\n ","permalink":"https://deewooo.github.io/post/%E6%92%B8%E4%BA%86%E4%B8%AA%E7%AE%80%E6%98%93mac%E7%89%88%E7%BD%91%E6%98%93%E4%BA%91%E7%95%AA%E8%8C%84%E8%84%9A%E6%9C%AC/","tags":["自动化","脚本","番茄","效率"],"title":"撸了个简易mac版网易云番茄脚本"},{"categories":["简单生长"],"contents":"大前天收到货，昨天预约去到南京东路苹果店检测，没有问题，官方检测软件硬件全部可以检测出来。其实没有去到店里之前，自己验机录屏，基本心里是有底的，去店里只是加个保险。四张图片，做参考，分享验机流程。\n 未拆封前，手机包装外壳就有序列号，在苹果官网输入，看看是否激活，未激活才是对的。只要显示激活，不要拆盒子了，直接退，不犹豫。有耐心，可以把三个码都一一输入试，如果是新机，不管输入哪个码都是未激活的。     拆盒子之后，配件里，有产品标签，就是第三张图，标签里的码与包装盒的码一致。   第四张图，未激活的情况下，右下角有个！的图标，我的已经激活，看不到了。点击图标会有IMEI码，这里的码与标签里的，与包装盒的，都是一致的。三个地方的码相同，很重要，很重要。   补充：机器本身比较满意，客服也很耐心，之前华强北发货有过担心，现在看还不错。建议还是要自己做攻略，个人之前查验机攻略半天，收到货对应盒子查资料包括录屏又4小时，加上去实体店，一共1.5天，把细节流程梳理清楚，就当是学习了。\n   本作品由 IvyWooo 采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，转载请注明出处。 本文链接\n ","permalink":"https://deewooo.github.io/post/%E4%B8%80%E6%AC%A1Iphone14%E9%AA%8C%E6%9C%BA%E8%BF%87%E7%A8%8B%E7%9A%84%E8%AE%B0%E5%BD%95/","tags":["iphone14","验机","土猫爪痕"],"title":"一次Iphone14验机过程的记录"},{"categories":["技术"],"contents":"现在我们要给博客添加字数统计和阅读时间功能。这才像个技术分享博客的样纸。\n非常幸运，Hugo支持这个需求。\n修改模版文件 layouts/_default/single.html\n原本\n... {{ if .Site.Params.page_view_conter }} {{ partial \u0026quot;page_view_counter.html\u0026quot; . }} {{ end }} ... 改为\n... {{ if .Site.Params.page_view_conter }} \u0026lt;span id=\u0026quot;busuanzi_container_page_pv\u0026quot;\u0026gt;|\u0026lt;span id=\u0026quot;busuanzi_value_page_pv\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;span\u0026gt; {{ partial \u0026quot;page_view_counter.html\u0026quot; . }} 阅读 \u0026lt;/span\u0026gt;\u0026lt;/span\u0026gt;|\u0026lt;span class=\u0026quot;post-date\u0026quot;\u0026gt;共{{ .WordCount }}字\u0026lt;/span\u0026gt;，阅读约\u0026lt;span class=\u0026quot;more-meta\u0026quot;\u0026gt; {{ .ReadingTime }} 分钟\u0026lt;/span\u0026gt; {{ end }} ... 修改config.toml 将[params]下的参数page_view_conter赋值为true\n[params] page_view_conter = true 效果   参考文章  《给Hugo添加字数统计和阅读时间功能》，https://huangzhongde.cn/post/2020-02-22-%E7%BB%99hugo%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%92%8C%E9%98%85%E8%AF%BB%E6%97%B6%E9%97%B4%E5%8A%9F%E8%83%BD/ 不蒜子官网，http://ibruce.info/    本作品由 IvyWooo 采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，转载请注明出处。 本文链接\n ","permalink":"https://deewooo.github.io/post/%E5%BB%BA%E7%AB%99%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AF%87-Hugo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%92%8C%E9%98%85%E8%AF%BB%E6%97%B6%E9%97%B4%E5%8A%9F%E8%83%BD/","tags":["建站","hugo","站内搜索","fuse.js","Github Gist"],"title":"建站第十四篇 Hugo博客添加字数统计和阅读时间功能"},{"categories":["技术"],"contents":"Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。静态站点无法自带动态搜索功能，但作为一个博客，随着文章渐渐增多，站内搜索功能还是必要的。\n选择 针对这项需求，Hugo官方推荐了一些开源和商业站内搜索方案Search for your Hugo Website 。 本博客使用的Hugo主题是Clean White Theme for Hugo, 已经支持接入Algolia。Algolia是一家提供第三方搜索服务的公司，他们提供了免费易用的搜索服务，让开发者可以快速对站内内容进行检索和搜索。对于我来说，Algolia存在几个不能忍的问题：\n 国内使用速度慢，因为所有服务器均位于海外； 第三方服务需要注册，且存在依赖； 更新文章时需要npm重新生成索引，对build工具多了一项要求，不清爽。  出于以上的考虑，我决定放弃Algolia，寻找更轻的解决方案。依然从官方推荐的方案中选择， Github Gist for Fuse.js integration 成为了我首选的方案，原因如下：\n 最重要的原因，作者3天前还在讨论区进行解答，是个可靠的coder； 不需要 Hugo 以外， npm、grunt 或者其它build工具； 借助Fuse.js生成索引，相对轻。  Fuse.js 是一个功能强大、轻量级的模糊搜索库，通过提供简单的 api 调用，达到强大的模糊搜索效果，无需搞懂复杂的模糊搜索算法。\n实践 按Github Gist for Fuse.js integration 的文档所说，实现使用这个插件，只需要增加一些文件和修改config.toml中的output格式。整个过程我整理一下。\n添加文件 在hugo项目根目录添加4个文件：content/search.md,layouts/_default/search.html, static/js/search.js,layouts/_default/index.json\ncontent/search.md --- title: \u0026quot;Search Results\u0026quot; sitemap: priority : 0.1 layout: \u0026quot;search\u0026quot; --- This file exists solely to respond to /search URL with the related `search` layout template. No content shown here is rendered, all content is based in the template layouts/page/search.html Setting a very low sitemap priority will tell search engines this is not important content. This implementation uses Fusejs, jquery and mark.js ## Initial setup Search depends on additional output content type of JSON in config.toml \\``` [outputs] home = [\u0026quot;HTML\u0026quot;, \u0026quot;JSON\u0026quot;] \\``` ## Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places. ### Edit layouts/_default/index.JSON This exposes the values in /index.json i.e. add `category` \\``` ... \u0026quot;contents\u0026quot;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026quot;tags\u0026quot;:{{ .Params.tags | jsonify }}{{end}}, \u0026quot;categories\u0026quot; : {{ .Params.categories | jsonify }}, ... \\``` ### Edit fuse.js options to Search `static/js/search.js` \\``` keys: [ \u0026quot;title\u0026quot;, \u0026quot;contents\u0026quot;, \u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot; ] \\``` layouts/_default/search.html  {{ define \u0026quot;footerfiles\u0026quot; }} \u0026lt;script src=\u0026quot;https://code.jquery.com/jquery-3.3.1.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/fuse.js/3.2.0/fuse.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/mark.js/8.11.1/jquery.mark.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;{{ \u0026quot;js/search.js\u0026quot; | absURL }}\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} {{ define \u0026quot;main\u0026quot; }} \u0026lt;section class=\u0026quot;resume-section p-3 p-lg-5 d-flex flex-column\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;my-auto\u0026quot; \u0026gt; \u0026lt;form action=\u0026quot;{{ \u0026quot;search\u0026quot; | absURL }}\u0026quot;\u0026gt; \u0026lt;input id=\u0026quot;search-query\u0026quot; name=\u0026quot;s\u0026quot;/\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;div id=\u0026quot;search-results\u0026quot;\u0026gt; \u0026lt;h3\u0026gt;Matching pages\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;!-- this template is sucked in by search.js and appended to the search-results div above. So editing here will adjust style --\u0026gt; \u0026lt;script id=\u0026quot;search-result-template\u0026quot; type=\u0026quot;text/x-js-template\u0026quot;\u0026gt; \u0026lt;div id=\u0026quot;summary-${key}\u0026quot;\u0026gt; \u0026lt;h4\u0026gt;\u0026lt;a href=\u0026quot;${link}\u0026quot;\u0026gt;${title}\u0026lt;/a\u0026gt;\u0026lt;/h4\u0026gt; \u0026lt;p\u0026gt;${snippet}\u0026lt;/p\u0026gt; ${ isset tags }\u0026lt;p\u0026gt;Tags: ${tags}\u0026lt;/p\u0026gt;${ end } ${ isset categories }\u0026lt;p\u0026gt;Categories: ${categories}\u0026lt;/p\u0026gt;${ end } \u0026lt;/div\u0026gt; \u0026lt;/script\u0026gt; {{ end }} static/js/search.js  summaryInclude=60; var fuseOptions = { shouldSort: true, includeMatches: true, threshold: 0.0, tokenize:true, location: 0, distance: 100, maxPatternLength: 32, minMatchCharLength: 1, keys: [ {name:\u0026quot;title\u0026quot;,weight:0.8}, {name:\u0026quot;contents\u0026quot;,weight:0.5}, {name:\u0026quot;tags\u0026quot;,weight:0.3}, {name:\u0026quot;categories\u0026quot;,weight:0.3} ] }; var searchQuery = param(\u0026quot;s\u0026quot;); if(searchQuery){ $(\u0026quot;#search-query\u0026quot;).val(searchQuery); executeSearch(searchQuery); }else { $('#search-results').append(\u0026quot;\u0026lt;p\u0026gt;Please enter a word or phrase above\u0026lt;/p\u0026gt;\u0026quot;); } function executeSearch(searchQuery){ $.getJSON( \u0026quot;/index.json\u0026quot;, function( data ) { var pages = data; var fuse = new Fuse(pages, fuseOptions); var result = fuse.search(searchQuery); console.log({\u0026quot;matches\u0026quot;:result}); if(result.length \u0026gt; 0){ populateResults(result); }else{ $('#search-results').append(\u0026quot;\u0026lt;p\u0026gt;No matches found\u0026lt;/p\u0026gt;\u0026quot;); } }); } function populateResults(result){ $.each(result,function(key,value){ var contents= value.item.contents; var snippet = \u0026quot;\u0026quot;; var snippetHighlights=[]; var tags =[]; if( fuseOptions.tokenize ){ snippetHighlights.push(searchQuery); }else{ $.each(value.matches,function(matchKey,mvalue){ if(mvalue.key == \u0026quot;tags\u0026quot; || mvalue.key == \u0026quot;categories\u0026quot; ){ snippetHighlights.push(mvalue.value); }else if(mvalue.key == \u0026quot;contents\u0026quot;){ start = mvalue.indices[0][0]-summaryInclude\u0026gt;0?mvalue.indices[0][0]-summaryInclude:0; end = mvalue.indices[0][1]+summaryInclude\u0026lt;contents.length?mvalue.indices[0][1]+summaryInclude:contents.length; snippet += contents.substring(start,end); snippetHighlights.push(mvalue.value.substring(mvalue.indices[0][0],mvalue.indices[0][1]-mvalue.indices[0][0]+1)); } }); } if(snippet.length\u0026lt;1){ snippet += contents.substring(0,summaryInclude*2); } //pull template from hugo templarte definition var templateDefinition = $('#search-result-template').html(); //replace values var output = render(templateDefinition,{key:key,title:value.item.title,link:value.item.permalink,tags:value.item.tags,categories:value.item.categories,snippet:snippet}); $('#search-results').append(output); $.each(snippetHighlights,function(snipkey,snipvalue){ $(\u0026quot;#summary-\u0026quot;+key).mark(snipvalue); }); }); } function param(name) { return decodeURIComponent((location.search.split(name + '=')[1] || '').split('\u0026amp;')[0]).replace(/\\+/g, ' '); } function render(templateString, data) { var conditionalMatches,conditionalPattern,copy; conditionalPattern = /\\$\\{\\s*isset ([a-zA-Z]*) \\s*\\}(.*)\\$\\{\\s*end\\s*}/g; //since loop below depends on re.lastInxdex, we use a copy to capture any manipulations whilst inside the loop copy = templateString; while ((conditionalMatches = conditionalPattern.exec(templateString)) !== null) { if(data[conditionalMatches[1]]){ //valid key, remove conditionals, leave contents. copy = copy.replace(conditionalMatches[0],conditionalMatches[2]); }else{ //not valid, remove entire section copy = copy.replace(conditionalMatches[0],''); } } templateString = copy; //now any conditionals removed we can do simple substitution var key, find, re; for (key in data) { find = '\\\\$\\\\{\\\\s*' + key + '\\\\s*\\\\}'; re = new RegExp(find, 'g'); templateString = templateString.replace(re, data[key]); } return templateString; } layouts/_default/index.json  {{- $.Scratch.Add \u0026quot;index\u0026quot; slice -}} {{- range .Site.RegularPages -}} {{- $.Scratch.Add \u0026quot;index\u0026quot; (dict \u0026quot;title\u0026quot; .Title \u0026quot;tags\u0026quot; .Params.tags \u0026quot;categories\u0026quot; .Params.categories \u0026quot;contents\u0026quot; .Plain \u0026quot;permalink\u0026quot; .Permalink) -}} {{- end -}} {{- $.Scratch.Get \u0026quot;index\u0026quot; | jsonify -}} 修改toml Config.toml 在配置文件Config.toml中，添加以下内容\n[outputs] home = [\u0026quot;HTML\u0026quot;, \u0026quot;RSS\u0026quot;, \u0026quot;JSON\u0026quot;] 如果已经存在 [outputs]这项，就在home中增加\u0026quot;JSON\u0026quot;格式。\n按说明完成之后，访问localhost:1313/search就应该看到搜索框效果了。但是我的搜索页并没有看到搜索框。\n哪里出了问题？\n改造 一般说来，layouts/目录里保存的是 Hugo 的模板文件。layouts/是站点级别的模板， themes/\u0026lt;theme name\u0026gt;/layouts/是主题级别的模板，站点级别模板的设置优先于主题级别的模板。而我使用的主题Clean White Theme for Hugo ，在这里主题模版设置优先于站点模版设置，我们可以稍加改造，使主题模版失效就可以了。\n先找到主题对应的/search落地页，是位于主题目录下的layouts/search/list.html。我们只需要将list.html改个名字，就达到了主题模版失效的目的。\n另外还要将配置文件中的algolia配置关掉。为此，要对主题目录下的layouts/partials/nav.html进行修改。\n原版\n {{ if .Site.Params.algolia_search }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ \u0026quot;search\u0026quot; | relURL }}\u0026quot;\u0026gt;\u0026lt;i class=\u0026quot;fa fa-search\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} 改成\n {{ if .Site.Params.algolia_search }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ \u0026quot;search\u0026quot; | relURL }}\u0026quot;\u0026gt;\u0026lt;i class=\u0026quot;fa fa-search\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{else if .Site.Params.search}} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ \u0026quot;search\u0026quot; | relURL }}\u0026quot;\u0026gt;\u0026lt;i class=\u0026quot;fa fa-search\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} 同时在config.toml中添加配置参数search\n[params] search = true 这里还要注意，官方的search.html，用名为footerfiles的block定义了引入的js\n{{ define \u0026quot;footerfiles\u0026quot; }} \u0026lt;script src=\u0026quot;https://code.jquery.com/jquery-3.3.1.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/fuse.js/3.2.0/fuse.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/mark.js/8.11.1/jquery.mark.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;{{ \u0026quot;js/search.js\u0026quot; | absURL }}\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} 我的主题中没有在布局中使用footerfiles这个名字，所以需要我们修改一下布局页baseof.html，位于主题目录下layouts/_default/baseof.html。\n...... {{ block \u0026quot;main\u0026quot; . }} {{ end }} {{ partial \u0026quot;footer.html\u0026quot; . }} ...... 在 block main与 partial footer 之间加入block footerfiles\n...... {{ block \u0026quot;main\u0026quot; . }} {{ end }} {{ block \u0026quot;footerfiles\u0026quot; . }} {{ end }} {{ partial \u0026quot;footer.html\u0026quot; . }} ...... 至此，改造完成。\n效果   参考文章  《Hugo JS Searching with Fuse.js》，https://gist.github.com/eddiewebb/735feb48f50f0ddd65ae5606a1cb41ae 《为 Hugo 添加搜索功能》，https://blog.humblepg.com/post/2019/06/hugo-search.html 《Search for your Hugo Website》，https://gohugo.io/tools/search/ 《What is Fuse.js?》，https://fusejs.io/?from=thosefree.com    本作品由 IvyWooo 采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，转载请注明出处。 本文链接\n ","permalink":"https://deewooo.github.io/post/%E5%BB%BA%E7%AB%99%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AF%87-Hugo%E5%8D%9A%E5%AE%A2%E5%AE%9E%E7%8E%B0%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/","tags":["建站","hugo","站内搜索","fuse.js","Github Gist"],"title":"建站第十三篇 Hugo博客实现轻量级搜索功能"},{"categories":["技术"],"contents":"在前面的系列文章中，我们成功的利用Github Pages搭建了基于hugo生成的博客站，并且可以通过Github Action实现CI/CD。 随着博文的不断更新，势必有一天会出现读者希望通过评论直接与作者沟通的需求，我们写博文的目的之一就是希望与更大范围的人建立联结。因此，评论系统成为了刚需。\n选型giscus 希望以最小代价上手，我选择评论系统的依据如下：\n 越轻越好，尽量不需要自建服务，如果可以和Github Pages整合最好。 配置越简单越好。 当前使用的主题很容易支持。  我当前选择的Hugo主题是Clean White Theme for Hugo, 目前支持三种评论系统，分别是Giscus 、Disqus 和Twikoo 。\nGiscus Giscus 是由 GitHub Discussions 驱动的评论系统，与GitHub Pages有非常好的天然联结。根据官网，Giscus的特性有：\n 开源。 无跟踪，无广告，永久免费。 无需数据库。全部数据均储存在 GitHub Discussions 中。 支持自定义主题！ 支持多种语言。 高度可配置。 自动从 GitHub 拉取新评论与编辑。 可自建服务！  Clean White Theme for Hugo 主题配置Giscus只需要在config.toml中加上一段配置：\n[params.giscus] data_repo=\u0026quot;your GitHub repo\u0026quot; data_repo_id=\u0026quot;your repo id\u0026quot; data_category=\u0026quot;your category\u0026quot; data_category_id=\u0026quot;your category id\u0026quot; data_mapping=\u0026quot;pathname\u0026quot; data_reactions_enabled=\u0026quot;1\u0026quot; data_emit_metadata=\u0026quot;0\u0026quot; data_theme=\u0026quot;light\u0026quot; data_lang=\u0026quot;en\u0026quot; crossorigin=\u0026quot;anonymous\u0026quot; Disqus Disqus 目前最主流的第三方社会化评论系统，主要为网站主提供评论托管服务。简单易用，功能丰富。但官方对于免费版会自带很多广告推广，不清爽。\nTwikoo Twikoo 是基于腾讯云服务的评论系统，官方自称为一个简洁、安全、免费的静态网站评论系统。 对于国内网站来说，确实可以提供很丰富的功能，包括微信和QQ的即时提醒，以及评论检测和审核功能。额，所以呢，还是弃用吧。\n最终，我选择了主题所支持的Giscus 作为自己的评论系统。\n原理 Giscus 加载时，会使用 GitHub Discussions 搜索 API 根据选定的映射方式（如 URL、pathname、等）来查找与当前页面关联的 discussion。如果找不到匹配的 discussion，giscus bot 就会在第一次有人留下评论或回应时自动创建一个 discussion。\n要评论，访客必须按 GitHub OAuth 流程授权 giscus app 代表他发帖。或者访客也可以直接在 GitHub Discussion 里评论。你可以在 GitHub 上管理评论。\n配置过程 Giscus 官网提供了配置参数生成的功能。你可以通过各种选择获得配置参数，并且按提示安装giscus app以及开启Discussions功能。\n这里需要注意的地方是，仓库要选择Github Pages项目，这样开启的Discussions功能才能正常使用。\n对于Clean White Theme for Hugo 主题，最重要的4个参数，分别是：data-repo，data-repo-id，data-category，data-category-id。我生成的配置参数如下所示：\n\u0026lt;script src=\u0026quot;https://giscus.app/client.js\u0026quot; data-repo=\u0026quot;DeeWooo/DeeWooo.github.io\u0026quot; data-repo-id=\u0026quot;**************************\u0026quot; data-category=\u0026quot;Announcements\u0026quot; data-category-id=\u0026quot;*********************\u0026quot; data-mapping=\u0026quot;pathname\u0026quot; data-strict=\u0026quot;0\u0026quot; data-reactions-enabled=\u0026quot;1\u0026quot; data-emit-metadata=\u0026quot;0\u0026quot; data-input-position=\u0026quot;bottom\u0026quot; data-theme=\u0026quot;preferred_color_scheme\u0026quot; data-lang=\u0026quot;zh-CN\u0026quot; crossorigin=\u0026quot;anonymous\u0026quot; async\u0026gt; \u0026lt;/script\u0026gt; 最终，我在主题示例的配置参数中只修改了data-repo，data-repo-id，data-category，data-category-id4个参数的值，在config.toml文件最后，加上了下面一段配置：\n[params.giscus] data_repo=\u0026quot;DeeWooo/DeeWooo.github.io\u0026quot; data-repo-id=\u0026quot;**************************\u0026quot; data_category=\u0026quot;Announcements\u0026quot; data_category_id=\u0026quot;*********************\u0026quot; data_mapping=\u0026quot;pathname\u0026quot; data_reactions_enabled=\u0026quot;1\u0026quot; data_emit_metadata=\u0026quot;0\u0026quot; data_theme=\u0026quot;light\u0026quot; data_lang=\u0026quot;en\u0026quot; crossorigin=\u0026quot;anonymous\u0026quot; 这样就完成了Giscus的配置。\n效果 在每个博文页面下，都出现了评论框。  参考文章  giscus官网，https://giscus.app/zh-CN Clean White Theme for Hugo，https://github.com/zhaohuabing/hugo-theme-cleanwhite    本作品由 IvyWooo 采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，转载请注明出处。 本文链接\n ","permalink":"https://deewooo.github.io/post/%E5%BB%BA%E7%AB%99%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AF%87-Hugo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8giscus%E4%BD%9C%E4%B8%BA%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/","tags":["建站","giscus","Hugo","Github"],"title":"建站第十二篇 Hugo博客使用giscus作为评论系统"},{"categories":["技术"],"contents":"本系列包括三部分：\n 搭建本地服务 发布到Github Pages 配置Github Action实现CI/CD  本篇为第三部分——配置Github Action实现CI/CD。\n本方案以第一篇Hugo搭建的博客为例，但不限于Hugo，所有的博客生成器都可以采用此方案。\n为什么要配置自动发布 基于前两个部分组成方案中，一次更新过程如下：\n 在本地写好md文章 用hugo发布到public/目录下 复制到本地仓库(也可以将git本地仓库配置到public/目录下，但因为我同时也在用git管理md，这么做会将两个项目的git纠缠在一起，不够清爽，违背我的审美) 再推到远程仓库  这样做的弊端是：\n 本地必须管理两个git仓库，一个是hugo-md源码库，另一个是生成的静态网页库，增加了更新文章的复杂度； 发布必须先发一个本地，然后手动上传，也增加了出错的风险。  一个理想的状态是，我只负责写文，和将好的md提交到git备份，然后就可以坐等网站内容更新了。github官方提供的GitHub Action正可以满足这个需求。\n这样的需求下，整个Github Action只需要做两件事：\n 编译，生成静态文件 部署，把静态文件移动到合适的位置  比如放到某个云服务器上 或者放到 Github Pages    然后我们再通过git push来触发Github Action就可以了。\n准备 需要我们在github上准备两个仓库：\n 一个是存放博客源码的私有仓库 另一个是上一篇 创建的Github Pages公开库  主要流程  配置私有库的Github Action 配置合适的token  具体实现 配置私有库的Github Action  在hugo博客根目录下，创建放置Github Action配置文件的目录 .github/workflows； 在 .github/workflows目录下，创建一个yml文件，这就是Github Action需要的一个工作流的配置，如果需要多个工作流可以创建多个yml文件； Hugo的官方文档Build Hugo With GitHub Action 中也推荐采用GitHub Actions作为持续集成部署方案，并提供了yml文件示例:  name: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-22.04 steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: 'latest' # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == 'refs/heads/main' with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public 整个 Action 一个包含 4 个步骤：\n 拉取代码 准备 hugo 环境 使用 hugo 编译生成静态文件 把生成的静态文件发布到 Github Pages  可以根据自己的情况修改配置参数，最好和本地配置一致，可以避免版本不同造成的问题。我改了以下几处：\n jobs.build-deploy.runs-on改为macos-latest（为了和本地版本一致） jobs.build-deploy.steps.uses.with.hugo-version改为 \u0026ldquo;0.88.1\u0026rdquo; （为了和本地版本一致） token改用personal_token（github_token不支持外部库，我们采用的两个仓库的方案不能使用github_token） 增加cname配置自己的自定义域名  最终我的yml配置文件是这样的：\nname: dd299blog on: push: branches: - main jobs: build-deploy: # runs-on: ubuntu-20.04 runs-on: macos-latest steps: - name: Check out source uses: actions/checkout@v2 - name: Setup hugo uses: peaceiris/actions-hugo@v2 with: # hugo-version: \u0026quot;latest\u0026quot; # 可以修改为你使用的 Hugo 版本 hugo-version: \u0026quot;0.88.1\u0026quot; # extended: true # 设置是否需要 extended 版本 - name: Build run: hugo - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.PERSONAL_TOKEN }} # 另外还支持 deploy_token 和 github_token external_repository: DeeWooo/DeeWooo.github.io # 修改为你的 GitHub Pages 仓库 publish_dir: ./public # keep_files: false publish_branch: master # 如果使用自定义域名，还需要添加下面一行配置 cname: www.goodfun.me 配置合适的token 首先，需要生成一个Personal access tokens\n 在个人GitHub页面，依次点击Settings-\u0026gt;Developer settings-\u0026gt;Personal access tokens进入如下页面：    点击Generate new token出现如下界面，在Note中输入名称，在Select scopes选择workflow   将生成的token复制出来为后续创建secret做准备，注意必须及时复制，一旦离开此页面后续就无法查看其值，只能重新创建新token。\n  进入对应的GitHub项目下，依次点击Settings-\u0026gt;Secrets-\u0026gt;Actions进入添加Action secrets的界面，点击New repository secret按钮   在出现的界面中name部分输入在yml中设置的值，Secret部分输入步骤3中记录的token值，然后点击Add secret按钮   需要注意的是name的值不能以GITHUB_开头，否则创建会出错\n在流水线中将personal_token值设置为步骤5中secret的名称，类似${{ secrets.PERSONAL_TOKEN }}s，至此personal_token设置过程完毕。  在这里需要特别说明一下， hugo官网的例子用的是github_token，然而实操时才发现github_token不支持外部库，我们采用的两个仓库的方案不能使用github_token。 Github Action除了github_token之外，还支持deploy_token和personal_token。出于方便考虑，我选择了personal_token。\n至此整个设置过程完毕！\n结论 完成上述配置后，当我们完成一篇md文章后，用git命令push到远程仓库时，即可触发GitHub Action，按工作流的配置自动生成静态页面文件，并推送到GitHub Pages仓库。而 GitHub Pages 仓库更新后，又会自动触发官方页面部署 CI，实现网站的自动发布。\n到此，我们已经实现了 Hugo 博客本地搭建及版本管理、GitHub Pages 自动部署网站发布，实现了完整的自动发布系统。现在每当我完成内容编辑后，只需要推送代码，等待几分钟，即可通过我们的自定义域名访问更新后的网站。\n 参考文章  《Hugo + GitHub Action，搭建你的博客自动发布系统》，https://www.pseudoyu.com/zh/2022/05/29/deploy_your_blog_using_hugo_and_github_action/ Hugo的官方文档《Build Hugo With GitHub Action》，https://gohugo.io/hosting-and-deployment/hosting-on-github/#build-hugo-with-github-action 《利用GitHub Action实现Hugo博客在GitHub Pages自动部署》，https://lucumt.info/post/hugo/using-github-action-to-auto-build-deploy/ 《基于 Github Action 自动构建 Hugo 博客》，https://www.lixueduan.com/posts/blog/01-github-action-deploy-hugo/ 《使用 GitHub Actions 自动部署 Hugo 站点》，https://www.fournoas.com/posts/deploy-hugo-site-using-github-actions/ 《Hugo使用Github Action自动部署博客到Github Pages》，https://tomial.github.io/posts/hugo%E4%BD%BF%E7%94%A8github-action%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%88%B0github-pages/    本作品由 IvyWooo 采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，转载请注明出处。 本文链接\n ","permalink":"https://deewooo.github.io/post/%E5%BB%BA%E7%AB%99%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AF%87-Hugo+Github-Pages+Github-Action%E5%8D%9A%E5%AE%A2%E6%96%B9%E6%A1%88%E4%B9%8B%E4%B8%89%E9%85%8D%E7%BD%AEGithub-Action%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83/","tags":["建站","Hugo","Github Action","Github Pages"],"title":"建站第十一篇 Hugo+Github Pages+Github Action博客方案之三——配置Github Action实现自动发布"},{"categories":["技术"],"contents":"本系列包括三部分：\n 搭建本地服务 发布到Github Pages 配置Github Action实现CI/CD  本篇为第二部分——将搭建好的本地博客托管到github。\n本方案以第一篇Hugo搭建的博客为例，但不限于Hugo，所有的静态网站都可以采用此方案。\n需要准备的  github账户 发布好的本地静态网页文件，根据上一篇 的结果，执行hugo命令后，会在public/目录下生成整套静态网站。  流程 根据官网 ,主要步骤大致如下：\n 创建一个GithubPages仓库 将仓库拉到本地 添加静态网页文件添加到本地仓库 提交到github仓库  动手干 第一步，创建GithubPages仓库 新建一个public仓库，并命名为username.github.io，其中username指github账户名。\nGitHub Pages 项目需要符合 username.github.io 的特殊命名格式，如果仓库名和账户名没有完全匹配的话，网站就不能运行，所以一定要保证完全匹配。\n 第二步，将仓库拉到本地 在你希望的目录位置，用下面的命令将新建的远程仓库拉到本地。\ngit clone https://github.com/username/username.github.io 建议用github官方提供的客户端来操作，主要是省去了维护登录账号的工作。\n第三步，添加静态网页文件添加到本地仓库 将hugo生成的public/目录下所有文件，复制到本地仓库，\ncp -rf hugo项目/public/* xxx.github.io/ git add --all git commit -m \u0026quot;Initial commit\u0026quot; 再次建议git操作使用github客户端完成。\n提交到github仓库 git push -u origin main 待提交完成后，打开浏览器，访问https://username.github.io，就能看到和本地hugo网页一样的效果了。\n结论 基于这种方式的托管，可以在本地将写好的md文章发布到public/目录下，复制到本地仓库，再推到远程仓库，实现比较简单的网页更新。\n 参考文章  《用 GitHub Pages 建个人网站的小白级教程》，https://zhuanlan.zhihu.com/p/58254227 《GitHub Pages | Websites for you and your projects》，https://pages.github.com/ 《使用 Hugo 搭建个人网站（博客、个人主页）并发布到 Github 上》，https://zhuanlan.zhihu.com/p/417259374    本作品由 IvyWooo 采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，转载请注明出处。 本文链接\n ","permalink":"https://deewooo.github.io/post/%E5%BB%BA%E7%AB%99%E7%AC%AC%E5%8D%81%E7%AF%87-Hugo+Github-Pages+Github-Action%E5%8D%9A%E5%AE%A2%E6%96%B9%E6%A1%88%E4%B9%8B%E4%BA%8C%E5%B0%86%E6%90%AD%E5%BB%BA%E5%A5%BD%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E6%89%98%E7%AE%A1%E5%88%B0github/","tags":["Hugo","Github Action","Github Pages","建站"],"title":"建站第十篇 Hugo+Github Pages+Github Action博客方案之二——将搭建好的本地博客托管到github"},{"categories":["技术"],"contents":"花了一些时间用hugo重新搭建了猫狗窝，托管在github page上，又利用github action实现了CI/CD。非常省心！做到了专注写文，直接发布的效果。本篇记录就是写一点发布一点，陆续成文。\n下面就把这一次趟坑的过程总结一下，本系列包括三部分：\n 搭建本地服务 发布到Github Pages 配置Github Action实现CI/CD  本篇为第一部分——搭建本地服务\n为什么重建 19年的时候，用leanote做私有笔记服务，这样可以直接把笔记发成web页面，省去很多维护公共平台账号之类的杂事。但个人站点随之而来的维护工作，又让我陷入繁琐，违背了使用leanote是为了专注在写作上的初心。最终个人站还是荒废了。\n今年决定重启blog，作为记录和写作的练习地。\n为了避免又一次陷入泥潭，这次的笔记方案要满足以下几个需求：\n 支持md，并且要保证将来可以方便的迁移 可实现服务托管 源文件和站点文件都能够完全掌控 框架要有良好的社区支持  框架选择 基于希望专注写作的考虑，首先排除了wordpress，因为它太重了，提供的管理服务太灵活了，非常容易让人分心。我需要的博客引擎，一定要提供最简单的写作体验。\n一番寻找之后，锁定了三个引擎：jekyll、hexo、hugo，这是目前码农最喜欢用的三个博客生成器。下面就对它们做个简单的对比。\n   对比维度 Jekyll Hexo Hugo     社区支持(2022年09月25日,github上star数目) 45.3k 35.4k 62.5k   开发语言 ruby nodejs go   编译速度(这里 提供了585篇文章的生成时长) 15.90s 两者之间 4.90s   其他方面 Jekyll 有github支持，可以将markdown文件直接放到git仓库，github会自动生成网页文件。（Github一直是一个亲ruby的社区） Hexo提供了方便的部署命令，可以做到一条命令部署到github上。 Hugo的官方文档写的非常好，部署简洁。前两者部署时需要安装很多依赖，而hugo可以直接提供二进制文件运行，甚至不需要root权限。    关于编译速度的差别，原因在于Hugo使用go语言开发，go是一种编译型语言，执行速度非常快。而Jekyll使用ruby，Hexo使用nodejs，这两种语言都是解释型语言，执行效率比go低很多。而nodejs又比ruby快一些。从上面的数据可以看到，Hugo比Jekyll快了近10倍，完全不是一个量级的比较。\n最终，我选择了Hugo。虽然上手可能需要一点时间，但几乎所有维度的比较，都让Hugo成为我的第一选择。\n本地搭建 下面就开始Hugo的探索之旅。\n安装hugo 非常简单的安装。我使用的是 macOS，官方推荐用 homebrew 方式。\nbrew install hugo 完成后，可使用以下命令进行验证：\nhugo version 创建站点 要创建一个新的web站点，可通过执行hugo new site 给博客起个名字命令来实现。\n 执行后会创建一个文件夹，与命令中的名字同名，包括以下内容:\n. ├── archetypes │ └── default.md ├── config.toml ├── content ├── data ├── layouts ├── static └── themes 其中\nconfig.toml: hugo配置文件\ncontent: md文件和html\nstatic: 静态资源\nthemes: 主题\n其他的可先不管。\n选择主题 Hugo没有默认主题，所以需要自己安装主题。我使用的是hugo-theme-cleanwhite 。官网主题库：Hugo Themes\n$ mkdir themes $ git submodule add https://github.com/zhaohuabing/hugo-theme-cleanwhite.git themes/hugo-theme-cleanwhite 启动 Hugo 服务器，在 http://localhost:1313/ 将会看到由主题生成的示例网站\n$ hugo serve -t hugo-theme-cleanwhite 或只需要\nhugo server 即可。\n配置hugo 配置文件在网站根目录下 config.toml , 根据自身需求进行修改。在 hugo-theme-cleanwhite 主题下的 exampleSite 文件夹中的文件可作为参考。默认的文章将存储在 ./content/post 中，每当写完文章，运行 hugo 命令，Hugo 将自动生成静态网站到 public 文件夹中，我们只需要将该文件夹的内容发布在网络上即可。\n更多关于主题的配置可以参考 hugo-theme-cleanwhite README.md\n更详细的配置规则，可参考Hugo官方文件\n写作 现在可以创建一篇文章了。执行命令hugo new post/hello-world.md，会在content/post/下新增一个名为hello-world.md的文件。我们将头部自动生成的部分进行修改后，就可以在下面写自己的笔记或博文了。\n--- title: \u0026quot;Hello World\u0026quot; date: 2022-09-25T16:00:21+08:00 categories: - \u0026quot;Blog\u0026quot; tags: - \u0026quot;Hugo\u0026quot; draft: true --- # Hello World. Post example 本地部署 本地调试命令，执行它，就可以直接通过 http://localhost:1313 地址访问本地预览网页。\nhugo server 本地发布命令，执行它，就能在public/目录下生成整套静态网站，可以直接复制到web服务器中。\nhugo 至此，Hugo本地方案的搭建过程完成！\n 参考文章  《静态博客框架jekyll、hexo和hugo三者之间的区别与差异》，https://zhuanlan.zhihu.com/p/368407566 《浅谈我为什么从 HEXO 迁移到 HUGO》，https://sspai.com/post/59904 《從 Jekyll 轉移到 Hugo 心得》，https://blog.yeshuanova.com/2018/07/from-jekyll-to-hugo/ 《Hugo + GitHub Action，搭建你的博客自动发布系统》，https://www.pseudoyu.com/zh/2022/05/29/deploy_your_blog_using_hugo_and_github_action/ 《使用 Hugo 搭建个人网站（博客、个人主页）并发布到 Github 上》，https://zhuanlan.zhihu.com/p/417259374    本作品由 IvyWooo 采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，转载请注明出处。 本文链接\n ","permalink":"https://deewooo.github.io/post/%E5%BB%BA%E7%AB%99%E7%AC%AC%E4%B9%9D%E7%AF%87-Hugo+Github-Pages+Github-Action%E5%8D%9A%E5%AE%A2%E6%96%B9%E6%A1%88%E4%B9%8B%E4%B8%80%E4%BD%BF%E7%94%A8Hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","tags":["Hugo","Github Action","Github Pages","建站"],"title":"建站第九篇 Hugo+Github Pages+Github Action博客方案之一——使用Hugo搭建个人博客"},{"categories":["人间烟火"],"contents":"2022年04月17日，第28天。列一下迄今为止收到的政府物资，不能为了无团购连政府物资也拒绝。咱们有一说一，政府物资比较重要的。  2022年04月16日，足不出户第27天，继续无团购。\n 今天是2022年04月08日，我所在的小区封禁第19天，目测上海离清零还有很长的一段路要走，意味着小区还要封禁不知多久。而未来不知还有多少城市会陆陆续续遭遇奥密克戎的封城管控，所以我想把自己的物资储备清单分享一下，供有需要的同学们参考。\n根据以往各个城市封城后的病毒传染情况得知，风险最高的行为是团购和集中做核酸，如果能减少团购行为，传染几率就降低了一半。到目前为止，我还没参加过一次小区中的团购行为，完全靠储备成功维持了平常的生活质量。\n下面是物资清单：\n电器 可以冷冻一切的冰柜，非常重要！\n食品  粮食  米面粮油：至少两个月（按每天消耗量*60天计算） 高筋粉很重要，可以自己做面包切片 杂粮，不限量   蔬菜：各种新鲜水煮冷冻 各种鱼禽肉蛋，比如肉肠、腊肉、冷冻肉，多多益善 水果、牛奶（奶粉）、豆制品 葱姜蒜，尤其是葱，可以开启日常种葱模式，以防不时之需 油盐酱醋糖，各种调味料  tips：  多多储备自己爱吃的品类，比如我们爱的咖啡豆、奶油、葵花子、小鱼干等等等等。禁足期间，喜欢的食物会帮助我们度过难受的时期。 特别推荐湾仔码头速冻饺子，碳水和蛋白质的完美搭配  日用品 洗洁精、卫生纸、卫生巾、煤气灶电池、防盗门电池\n药品  日常消杀：酒精喷雾、免洗消毒凝胶、酒精消毒湿巾、消毒泡腾片、喷壶等 日常用药：钙片、VC。如果有基础病，要尽量多的准备常用药 应急用药：消炎药、感冒药、退烧药、泻药  衣物（2022年04月10日补充） 像下图中这样的皮肤风衣一定要做到每人至少两件。每次出门做核酸穿上，回家立刻换下来，进行消杀，然后用洗衣机清洗，要加消毒水。尽量杜绝聚集性做核酸导致的传染。\n    本作品由 IvyWooo 采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，转载请注明出处。 本文链接\n ","permalink":"https://deewooo.github.io/post/2022%E5%B9%B404%E6%9C%88%E4%B8%8A%E6%B5%B7%E7%96%AB%E6%83%85%E5%B1%85%E5%AE%B6%E7%A6%81%E8%B6%B3%E7%89%A9%E8%B5%84%E5%82%A8%E5%A4%87%E6%B8%85%E5%8D%95/","tags":["疫情","物资"],"title":"2022年04月上海疫情居家禁足物资储备清单"},{"categories":["效率"],"contents":"通过向别人清楚的解说某一件事，来确认自己是否真的弄懂了这件事。\n费曼学习法的步骤 第一步，确立学习对象 在这一步，我们要确定学习的目标。比如“学习费曼学习法”也可以成为学习的目标。\n第二步，理解要学习的知识 通过系统化的思考，将知识理解、归纳、筛选、分析、消化。在这个过程中，可以尝试通过复述，找到理解中的盲区，进一步完成对知识的理解。\n第三步，以教代学 “如果你不能向其他人简单地解释一件事，那么你就还没有真正弄懂它。” 面对一个外行人，用对方听得懂的语言把这些知识解释给他听。经过反馈，再检查自己的学习效果。\n第四步，回顾和反思 通过回顾和反思，对学习的不满意之处进行纠错，发现缺口，并用更精练的语言概括自己掌握的知识。\n第五步，简化 抽取我们需要的东西，形成自己的知识体系。 再次复述，建立原创观点，形成新知识。\n参考资料 尹红心，李伟《费曼学习法》 知乎回答：https://www.zhihu.com/question/20576786\n","permalink":"https://deewooo.github.io/post/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","tags":["费曼学习法"],"title":"费曼学习法（第一次学习笔记）"},{"categories":["历史"],"contents":"对于南北战争，美国政府网站的官方描述（https://share.america.gov/zh-hans/civilwarfacts/）如下：\n 南北战争爆发的直接导火索是林肯于1860年当选总统，南部7个州以此为由陆续退出联邦，成立以杰斐逊·戴维斯（Jefferson Davis）为总统的邦联国（Confederate States，此后又有4个州加入邦联国），并驱逐驻扎南方的联邦军队，林肯则下令攻打叛乱州。南北战争最终导致奴隶制度在美国最终被废除，也对当时的政经情势、日后社会发展产生了巨大的影响。\n 表面的起因是在林肯当选之后，南方州宣布独立，总统为了维护联邦的统一，发起战争。\n从南方州的角度看，林肯当选意味着一定会废除奴隶制，而奴隶制是南方经济的基础。如果联邦政府废除了奴隶制，不仅仅是动摇了南方的经济基础，更可以说是颠覆了南方整个的政治经济秩序，所有人的生活都会被颠覆。\n从商业的角度上，南方的棉花种植可以做到成本很低，源源不断的向英国出口原材料，而当时由于没有关税，英国的工业制成品的价格也很低，足以在与美国北方工业的竞争中取得优势。这对北方构成了严重的威胁。北方希望能够统一关税来形成贸易保护，让本国的工业得到发展，对南方产生了贸易要求。\n理解上述的背景的同时，我们要看到南方的低成本棉花是建立在奴隶制低人权的基础上的，而美国的建国理念《独立宣言》中，至今被传颂的那句：\n 我们认为这些真理是不言而喻的：人人生而平等，造物主赋予他们若干不可剥夺的权利，其中包括生命权、自由权和追求幸福的权利。\n 可以说，南方州的奴隶制，不仅违背了美国的建国理念，还制约了美国工业的发展。\n同时也要看到，南方美国人也有“追求幸福的权利”，所以他们继续坚持自己的体制和原则，觉得天经地义，并愿意为之战斗。更要看到南方的军事素质和战斗意愿都高于北方，并且在第一年取得了不错的战绩。但当林肯发表《解放奴隶宣言》之后，局势开始扭转了，奴隶开始逃到北方，甚至愿意为北军作战。北军开始占据上风，并且扩大优势，而等到南方也宣布废除奴隶制时，已经大势已去。\n黑人的选择，成了左右战局的关键第三方，对南军来说，此消而彼长。同样来自美国政府网站（https://share.america.gov/zh-hans/civilwarfacts/）的数据表示：\n 非裔美国人只占北方人口的不到1%，但到战争结束时，联邦军队中10%为黑人，共有18万黑人入伍，占黑人合格入伍者的85 %。\n 《论语》中说：\n 闻有国有家者，不患寡而患不均，不患贫而患不安。\n 奴隶和自由人同时存在时，很难阻止奴隶对自由身份的渴望。南方州也许觉得委屈，觉得不甘，但必须承认的是，南方州的农业建立在奴隶制基础上，建立在人与人之间存在着巨大的权利差别的基础上，不管怎么描述其合理性，无法阻拦人性对自由的渴望。就算北方有挑拨教唆的嫌疑，但南方自己存在内生性结构性的矛盾是不能否定的。\n虽然战争结束之后，大部分黑人反而因为无法适应工业社会找不到工作，也有大量黑人希望原本的奴隶主重新收留他们。但这些都不能否定当初黑人对自由的渴望形成的合力。\n也许这就是先贤们反复提到的“人心所向”。\n","permalink":"https://deewooo.github.io/post/%E7%BE%8E%E5%9B%BD%E5%8D%97%E5%8C%97%E6%88%98%E4%BA%89%E6%98%AF%E6%80%8E%E4%B9%88%E5%9B%9E%E4%BA%8B%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","tags":["美国历史","南北战争"],"title":"美国南北战争是怎么回事?（第一次学习笔记）"},{"categories":["效率"],"contents":"GTD的主要流程 一套GTD流程需要用到下面几种清单类型：\n 杂事收集篮  所有大脑中想起的想法，任何事物都放在这里，确保大脑清空   下一步清单  经过整理之后只需要专注完成的事务   项目清单  一天以内不能完成的事务，需要分解成一天以内的步骤   将来/也许清单  人生是一定要有梦想的   等待清单  需要和他人合作的事务    也可以根据自己的需要，决定是否使用日历。\n收集 首先，将所有的杂事放入待办收集篮。\n整理 针对每一个事项，问自己下面的5个问题：\n1. 这件事可行动么？——否——\u0026gt;{放入1. 参考资料；2. 将来/也许清单；回收箱}\n2. 可以1步搞定么？——否——\u0026gt;{放入：项目清单}\n3. 可以2分钟搞定么？——能——\u0026gt;{立即做}\n4. 该我做么？——否——\u0026gt;{放入：等待清单}\n5. 有特定时间么？——无——\u0026gt;{放入：下一步清单}\n6. 放入日历\n回顾 问自己下面5个问题，更新清单内容。\n1. Inbox清空没？\n2. 收集够没？\n3. 等待清单下一步？在做么？如何了？\n4. 项目清单下一步？在做么？如何了？\n5. 可能清单下一步？在做么？如何了？\n [[GTD主要流程]]\n需要注意的点  有闪念随时都要记录下来，放在收集篮中 每次从“下一步清单”中取出一件事，专注做完，再取下一件。 定期回顾，确保不会偏离起初的方向  ","permalink":"https://deewooo.github.io/post/GTD%E5%88%9D%E6%8E%A2/","tags":["GTD"],"title":"GTD初探"},{"categories":["历史"],"contents":"今天已经是正月十八了，丰县事件，从春节前，直到出了十五，没有完结，还在持续中。\n过程就不记录了，这件事将来会有很多材料来书写，记录下到今天为止，我所看到的两种力量。\n第一种，信息的力量——信息的传递和群体中的个体\n能够影响一个独立自然人的行动的因素有两个：一是接收到的信息，另一个就是本人的决策。假设每个人都出于自己的立场决策行动，就是经济学中假设的理性人概念，在这个假设前提下，比较公平的环境是尽量减少信息的阻塞，让信息像海洋中的暖流一样，自然的流向每个人。所以经济学里有句话：信息不对称是最大的不公平。而如果每个人都是理性人，那么整个环境就会存在一只看不见的手，将整体调整到对每个人都合理的最优状态。\n丰县事件，是第一次平民的专业与讨论放到台面上，达到了以往的最大范围和深度。互联网抹平了以往的信息不对称，将各领域的专业人士与围观群众毫无障碍的连接起来，共同为公共事务发声。所谓，有理不在声高。在这个抹平了信息不对称的环境下，专业人士只要讲出道理，就会第一时间被所有公众接收到。在这个事件中，出现了每个人都是近似理性人的效果，每个人在公共信息下，出于自己的立场做不同的事情，将事情的走向推向了有利于所有人的方向。\n在我看来，这是科技进步带来的必然结果。是少谈点主义多做点实事的最好践行。\n第二种，金融的力量——命脉之所在\n在职场上，经常出现合作时对方各种充耳不闻没有反应，事情卡在一个节点，没办法往下运转。面对这种情况，常用的处理办法，除了讲道理，还要有让对方疼的方法，这样才能有效推动事情向前一步。丰县事件中，承担让对方疼的角色，是经济和金融。有人公开了丰县的财政情况，同时号召大家在经济和金融领域抵制丰县抵制徐州，比如，不买徐州11家上市公司的股票交易，不买徐州和丰县的商品，不去徐州旅游，不和徐州做生意等。立竿见影，几天后，所有金融机构将丰县的城投债下架。而徐州的上市公司总市值减少了27.1亿。围观者知道了自己不仅能表达愤怒，还能用钱包践行投票权。行动远比情绪有力量。百年前，群众用革命用武力表达愤怒。今天不必如此了，在一个没有投票权的体制中，可以践行的方式不仅仅是用脚投票，还可以用钱包。而在号召者发出号召的当天，微博账号立刻被封杀，这恰恰证明了这种方式确实能够让对方疼，以至非常害怕到一定要封掉说话的人。这就是金融的力量。\n这一次，亲眼见证了这两种力量叠加在一起的能量。何其有幸，可以投身两者之中。\n这两者的最大公约数，是数学。本质上，这是理性的力量。\n","permalink":"https://deewooo.github.io/post/%E4%B8%B0%E5%8E%BF%E4%BA%8B%E4%BB%B6%E4%B8%80%E5%9C%BA%E6%97%B6%E4%BB%A3%E7%9A%84%E8%AE%B0%E5%BD%95%E6%88%91%E8%A7%81%E8%AF%81/","tags":["信息","金融"],"title":"丰县事件，一场时代的记录，我见证"},{"categories":["简单生长"],"contents":"晴了一天后又下起了雨，公交车等了很久没来，现在必然已经迟到了。等车的时候看到狗狗带着绿帽子，骑着自行车火急火燎地经过，小短腿快速地登啊登，车筐里放着蓝色便当袋子。我叫了她三声，第三声她听到了，看向我，我在马路对面冲她摆摆手，她也冲我摆摆手，再登着短腿而去。嗯，骑得太快，明天起早上得拉她一起出门才行。\n昨晚回家做了饭洗了碗，然后看了部电影等风来，不过却没有投简历和学习，今天对自己也有很多安排，希望能做好。\n一共也差不多投递了40家公司，至今没有回音，一方面是投递量不够，另一方面也是自己部分知识的缺乏，两者都没有很好的进行，我需要大量地改进。公司资料一直没看，这样即便机遇来了，也不一定能把握，耽误之急，投递和充电。这样也就充实。\n","permalink":"https://deewooo.github.io/post/%E6%99%B4%E4%BA%86%E4%B8%80%E5%A4%A9%E5%90%8E%E5%8F%88%E4%B8%8B%E8%B5%B7%E4%BA%86%E9%9B%A8/","tags":["简单生长","土猫爪痕"],"title":"晴了一天后又下起了雨"},{"categories":["简单生长"],"contents":"从今年2月底失业到现在，失业大概接近4个月时间，而工作前景依旧不明朗，少有岗位发布出来，企业招人的少，要求也比以前挑剔很多。\n不得不说，疫情的焦虑，加上失业的焦虑，现在这个阶段差不多算是我最近十年以来，最艰难的一段时间了。在不利的大环境因素下，更能看清自己的实力，现实妥妥的打脸，之前的盲目乐观变成了悲观，自信心也大受打击。没有自信的人是十分可怜且不利的，可是一时半会又走不出来。如果自己不能战胜自己，没有好的状态，也难找到合适的工作吧。\n好多只的MARCO的铅笔已经用了许久，长长短短，不止照片这些。我是有点儿“造”的类型，物品丰满的时候，喜欢好多一样的一起用，或者一个类型不同颜色不同风格的一套都想要。这些MARCO铅笔，大概二三十支吧，还有二十多张素描纸是读研期间一个同学给的，甚至不知道姓甚名谁。2011年的时候，狗狗研究生毕业，好多书带不走，就在学校食堂门前甩卖，半卖半送，不然就只能卖废品了，倒不是钱的问题，而是好的书没有找到合适的人发挥它们的价值，心里难过，毕竟好多都是不错的经典书、工具书和教材。路过一个瘦瘦的男生，个子大概175左右，穿T恤牛仔裤，认真挑了两本书，边挑书，边闲聊起来。书挑好了，结果人家也是毕业生，平时画画，一堆纸和笔也不想带走，问我们要不要。正好我画画，这些都需要，巧极了。男生也不磨叽，直接带我们到了他寝室楼下，他上楼拿了下来，除了纸笔，还有一个台式机屏幕大小的小号画夹（墨绿色）。男生只说了一句话：“要坚持画呀”。于是开开心心接过，道谢，收摊回寝。\n2011年到现在，接近十年光阴，早已记不得男生的任何信息，长相也模糊不清，连着铅笔也用得参差不齐，更多用完了的了无痕迹。大部分时间是忘记的，并不会想起铅笔的故事，只是随意用着。偶尔才会想起，就像此刻，不再崭新的它们让我记起陌生人的善良和给予，今日，我也如当日一般，说一声：“ 同学，谢谢啦。” 不同的是，衷心希望今日的我能有当时一般发自内心的灿烂笑容。\n ","permalink":"https://deewooo.github.io/post/%E4%B8%80%E5%A0%86%E6%BC%82%E4%BA%AE%E7%9A%84MARCO%E9%93%85%E7%AC%94%E8%AE%A9%E6%88%91%E8%AE%B0%E8%B5%B7%E5%96%84%E8%89%AF%E5%92%8C%E7%BB%99%E4%BA%88/","tags":["简单生长","土猫爪痕"],"title":"一堆漂亮的MARCO铅笔，让我记起善良和给予"},{"categories":["简单生长"],"contents":"今天做了菠萝蜜干，要好好记录下来。\n第一次买整个儿的菠萝蜜，并不知道如何选择。拼多多上的卖家很多，10斤到40斤好像都有，重量不同，价格区间也不同。综合计算之后，我选择了一家销量过万的商家，买了一个14~7斤之间菠萝蜜，价格是38块。算来是性价比最高的了。太轻的不敢买，担心是空的，没熟，太大的单价计算并不划算，第一次，先试试水。\n大概四天之后，菠萝蜜寄到了，嗯，在上海，这个快递的速度不算快，但还能接受。箱子很脏，而且底部有破损，看到商家不易的情况下，算了。用称称了下，15斤，还行。到货之后并没有马上开膛破肚，在家又放了3天，等到皮有点儿软了才动爪。特意看了如何拆解菠萝蜜的攻略，不然还真不知如何下手，如果像是削苹果皮那样处理，就真的懵逼了。\n一、不多说，先来个十字斩，一分为四，恩，不错，菠萝蜜新鲜，肉也还饱满。 二、接下来，就把四分之一的大块，拆成更小的小块，每一块大概可以再切成三块，那么整个菠萝蜜，被拆成了大概12小块了。 tip：合适的刀具很重要，我就是选择了两把刀；一把双立人的菜刀，用于切分大块、剔出除大块的瓤；一把日本的陶瓷刀，用于帮助把一个个的菠萝蜜肉给剔出来，顺便也可以去除妨碍的一些皮。 三、剔出菠萝蜜肉。这一步有三个技巧：1、每一小块，朝里的瓤的部分要剔掉，不要心疼会碰到肉，这样里面的菠萝蜜肉才好扒拉出来；2、找到菠萝蜜肉连在表皮上的小根，用陶瓷刀轻轻在根部一切，就掉了下来，有的甚至用手直接掰就下来了。 一共两盒，还没有去除里面的果仁，称了下，共6斤，15斤的菠萝蜜剔出了大概6斤果肉。 四、去核 去核也是个体力活，每个菠萝蜜肉里的核都要剔出来。一般两步，1、用陶瓷刀在菠萝蜜肉上划一道；2、把核取出来，去掉肉里的一层膜，这层膜苦，所以也要剔掉。 6斤带核的果肉，剔除果核之后，剩下不到3斤了，大概2斤半多一点。 五、稍微晒干一点 菠萝蜜肉其实水分不少，黏糊糊的，直接进烤箱烤干太费劲，正好天气很好，就直接在阳台先晒一天。 五、进烤箱 180度，大概烤20分钟；150度，大概烤30分钟；相比来说，150度的更好控制，不容易烤糊。 真正的菠萝蜜干，很好吃，重量大概400克左右，不到一斤；15斤的大菠萝蜜，做成干，不到一斤，但是真好吃啊，冰箱冷冻冷藏都可以放，一点儿都不影响味道。顺便说一下，为什么要烤呢，因为新鲜的菠萝蜜肉没法子保存，放冷藏不行，很快就冻烂了，放冷冻也不行，解冻也软了，远不如新鲜的好吃。所以，烤虽然麻烦，但是确是最好的方法。朋友6岁的小男孩儿到家里玩，挑嘴的娃，吃起菠萝蜜干停不下来，吃不完兜着走，还想要一些带回家。\n 六、总结 第一次菠萝蜜干，成功！赞！ 一共，额，大概花费了6小时工时吧，主要是拆菠萝蜜肉、剔核、烤，太麻烦了。 最后补充细节，如何洗手，菠萝蜜的瓤整个是黏黏糊糊的，手里都是粘稠的乳液。我尝试了洗手液、洗洁精都不好用，相对来说，肥皂的效果好一些，虽然也要搓几次，但是会把粘附的液体从手上脱离。\n好吃是好吃，还有勇气再买一个做一回吗，好吧，最近是没有欲望了，累。\n","permalink":"https://deewooo.github.io/post/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%87%E6%95%B4%E4%B8%AA%E8%8F%A0%E8%90%9D%E8%9C%9C%E7%83%A4%E8%8F%A0%E8%90%9D%E8%9C%9C%E5%B9%B2/","tags":["简单生长","土猫觅食"],"title":"第一次切整个菠萝蜜，烤菠萝蜜干"},{"categories":["简单生长"],"contents":" 自然也是如此：它通过牺牲简洁性来换取可靠性。 零缺陷软件的代价就是它的“过度设计”，超量建设。 以知识为基础——数据是廉价的，而且大量充斥在网络上。将知识运用到数据上才是无价之宝。 生命具有： 时间和空间的模式；自我复制的能力；自我表征（基因）的信息库；使特征持久的新陈代谢功能；功能交互——它并非无所事事；彼此相互依赖，或能够死亡；在扰动中保持稳定的能力；进化的能力。 对生命而言，重要的不是它的组成材料，而是它做了什么。生命是个动词，不是名词。 尽管“进化”这个词会引起混淆，但最能体现变化的那些词都与有机体密切相关：成长、发育、进化、编译、学习、蜕变、适应。大自然就是一个有序变化的王国。而迄今为止的无序变化正是技术的真实写照。无序变化的极致是“革命”——这是一种人造之物所特有的激烈、间断式的变化。自然界中不存在革命。 信息由基因传递给肉体，但绝不能倒推——从肉体回到基因。也就是说，自然对自己的过去是不留一丝记忆的。 基因组是极致的分权系统——蔓生的冗余片段，大规模并行处理，没有主管，无人监察各个事务。 “学习”应该是在一生而非几代中获得的适应。计算机专家并不对行为学习和肉体学习进行区分。生物体在其一生中有很大的空间重塑自己：   形态可塑性（一个生物体坑你有不止一种肉体形态）。 生理适应性（一个生物体的组织能改变其自身以适应压力）。 行为灵活性（一二生物体能做一些新的事情或移动到新的地方）。 智能选择（一个生物体能在过去经历的基础上做出选择）。 传统引导（一个生物体能参考或吸取他人的经验）。  这里的每一个自由度都代表一个方向，生物体可以沿着它在共同进化的环境中寻找更好的办法重塑自己。考虑到它们是个体在一生中所获得的适应性，并能在以后被遗传同化，因我而我们称这五种选项为可遗传学习的五个变种。\n能够将学习和进化融为一体的生物，要比那些只学习或只进化的生物更成功。 学习加上进化，正是文化的一剂配方。通过学习和行为将信息传递给仅有，是遗传同化；反之，由基因将信息传递给学习和行为，就是文化同化。随着时间的推移，由于文化承担了部分生物性的工作，人类的生物行为逐渐依赖于人类的文化行为。孩子们从文化（祖辈的智慧）而非动物本能中每多传承一份，就使得生物学的人类多一分机会，将这种文化代代相传下去。 对于一种文化来说，最本源的动力就是复制自身以及改变环境以利于其传播，除此之外，别无其他。 文化随我们的躯体而进化，反之亦然。没有了文化，人类就失去了独有的天赋。（比方狼孩）。文化重塑了生物，文化趋于一个自提速的过程。 进化无时无刻不在细察这个世界，不仅仅是为了找到更适合的生物体，更是为了找到提升自身能力的途径。它每时每刻都在寻求在适应上有所寸进。这种不间断的自我鞭策形成一种巨大的压力——如同整个大洋在寻找一丝可以渗透的缝隙一样——迫使其提高自身的适应能力。 进化是一种自身求变、自行重组的有组织变化的架构。 进化真正想要的——即它去往的目的地——是揭示（或创造）某种机制，能以最快的速度揭示（或创造）宇宙中可能的形式、事物、观念、进程。 共生行为可以只利用合作而不是竞争的力量。至少，合作能培养出一套独特的小生境以及一种竞争无法提供的多样性。在恰当的时机稍稍进行一下共生协调，就能取代漫长的细微变化。处于交互关系中的进化过程可以跃过个体的上百万年反复试错的时间。 神经线路天生就有玩火自焚的倾向。如果放任不管，不让它直接连接“外部世界”，聪明的网络就会把自己的构想当做现实。 混沌理论证明了高位的复杂系统是无法预测的。  根据混沌定律，初始秩序可以分解为原不可预测性。你无法做远期预测。\n根据混沌定律，那些看起来完全无序的东西，在短期内可以预测。你可以做近期预测。\n 首先，你可以抽取混沌系统内在的固有模式，取得良好的预测。 其次，进行一次有用的预测用不着看得太远。 第三，即使是一点点有关于未来的信息，也是非常有价值的。  有限的前瞻就是“有正面意义的短视”。  国际象棋中的经验规则，是可以指靠的相当不错的生活规则。\n 首选那些增加选择余地的着法； 避开那些结果不错但要求弃子求兑的着法； 从那些毗邻多个有利位置的有利位置着手。 在对局势的前瞻和切实通盘关注当前的状况直接取得平衡。  学习就意味着生存。 谋求持久的不均衡状态。静止不变和过于剧烈的变化都无益于创造。 大自然无中生有的九条规律：   分布式。 自下而上的控制。 递增收益。 模块化生长。 边界最大化。 鼓励犯错误。 不求最优化，但求多目标。 谋求持久的不均衡态。 变自生变。  ","permalink":"https://deewooo.github.io/post/%E5%A4%B1%E6%8E%A7kevin-kelly/","tags":["简单生长","土猫读书"],"title":"《失控》kevin Kelly"},{"categories":["技术"],"contents":"周末，为了追踪一个bug产生的原因，请运维同学帮忙记录了近20个小时的test环境的数据库binlog。拿到的日志文件解压后有200+M，这是任何文本编辑器都无法处理的大小。这里介绍一下windows环境分析大文件的好工具——LogViewer (http://www.uvviewsoft.com/logviewer/index.htm)。\n官方介绍 UVviewsoft LogViewer 是一款无限大小的文本日志文件的查看器。（UVviewsoft LogViewer is a viewer for text log files of unlimited size.）\n下载地址 http://www.uvviewsoft.com/logviewer/download.htm 使用方式不多介绍，可以去官网+google自行阅读。界面长这样（内容来自可怕的binlog文件） 关于授权 免费版每次打开有25s强制广告，个人认为是可以忍受的。收费列表见这张图 据说还有其他好用的工具，没用过，先留坑吧\n 参考文章  《 Large Log Viewer 大型日志查看工具》，http://blog.qdac.cc/?p=4338    本作品由 IvyWooo 采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，转载请注明出处。 本文链接\n ","permalink":"https://deewooo.github.io/post/Windows%E4%B8%8B%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E5%B7%A8%E5%A4%A7%E7%9A%84%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6/","tags":["LogViewer","log","工具"],"title":"Windows下如何查看巨大的日志文件"},{"categories":["技术"],"contents":"#背景介绍 做为一个自由开发者，我拥有一台有公网ip的阿里云ecs，家中用台式机跑了几个vm，提供各种需求的开发和测试环境。平时开发在家里进行即可，最近谈了几个项目经常需要外出，为了节省时间，往往会在各个不同的地点coding或者调试部署，这时候就需要一台具有公网ip的服务器，做为跳板机提供ssh跳转访问。\n我的具体需求是：\n 用阿里的CloudToolKit工具可以从外网环境部署到内网vm 用datagrip可以访问内网mysql  #网络环境 盘点一下目前具有的资源\n 一台具有公网ip的阿里云ecs 家里的台式机挂了几个vm，通过路由分配了内网ip 使用frp配置了内网穿透，ecs跑frps，内网vm跑frpc  frp支持 TCP、UDP、HTTP、HTTPS等协议类型，提供了非常优秀的内网穿透功能。在这个基础上，将ecs做为跳板机进行ssh访问是完全可以实现的。\n#着手实现\n配置vm的frpc端口映射 [ssh] type=tcp local_port = 22 remote_port = ***** [mysql] type = tcp local_port = 3306 remote_port = ***** 配置CloudToolKit 增加一个远程主机，在CTK窗口点击\u0026quot;Add Host\u0026quot;按钮。  配置具有公网ip的ecs的ssh连接，22端口要放开。  配置带有跳板机的内网主机连接。 因为frp的内网穿透，host填写localhost，port填写frpc的配置。\n 在Advanced标签下，选择之前配好的跳板机。\n 测试连接，通过。\n 配置DataGrip 配置跳板机  配置内网穿透后的端口 同CTK一样，host填写localhost，port填写frpc的配置。\n 测试连接，通过。   本文链接：https://deewooo.github.io/post/%E5%BB%BA%E7%AB%99%E7%AC%AC%E5%85%AB%E7%AF%87-%E4%BB%A5%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84ecs%E4%B8%BA%E8%B7%B3%E6%9D%BF%E6%9C%BA%E5%AE%9E%E7%8E%B0ssh%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8/\n本作品由 IvyWooo 采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，转载请注明出处。\n ","permalink":"https://deewooo.github.io/post/%E5%BB%BA%E7%AB%99%E7%AC%AC%E5%85%AB%E7%AF%87-%E4%BB%A5%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84ecs%E4%B8%BA%E8%B7%B3%E6%9D%BF%E6%9C%BA%E5%AE%9E%E7%8E%B0ssh%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8/","tags":["ecs","ssh","CloudToolKit","建站"],"title":"建站第八篇 以阿里云的ecs为跳板机实现ssh访问内网服务器"},{"categories":["技术"],"contents":"在安装好docker之后，部署docker版的应用，只需要一句代码就好。\n1 环境 os：ubuntu 16.04 docker版本：Docker CE，Docker version 19.03.1\n2 安装es docker run -it -p 9200:9200 -p 9300:9300 --name es elasticsearch:6.4.0 报了一个错\n[1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144] 需要修改/etc/sysctl.conf\n$ sudo vim /etc/sysctl.conf # 添加 vm.max_map_count=262144 $ sudo sysctl -p 再次启动\ndocker start es  部署完成。\n3 访问 访问 http://localhost:9200,看到这样的图，就表示安装成功了。\n   本文链接：https://deewooo.github.io/post/%E5%BB%BA%E7%AB%99%E7%AC%AC%E4%B8%83%E7%AF%87-%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85elasticsearch/\n本作品由 IvyWooo 采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，转载请注明出处。\n ","permalink":"https://deewooo.github.io/post/%E5%BB%BA%E7%AB%99%E7%AC%AC%E4%B8%83%E7%AF%87-%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85elasticSearch/","tags":["Docker","elasticSearch","建站"],"title":"建站第七篇 使用Docker安装elasticSearch"},{"categories":["简单生长"],"contents":" 作者：宗萨蒋扬钦哲仁波切 2010年 《人间是剧场》 life as cinema 新星出版社\n1、大乘、小乘、金刚乘 我们该做的，是不去伤害他别人，不伤害众生，也不累积害人的因，那你就不仅是普通人，同时也是小乘行者。 如果你更勇敢些，想做更多的事情，那么除了不伤害别人，你还要尝试去把帮助别人，并累积助人的因，那你就不仅是普通人，同时也是大乘行者。 金刚乘行者，你必须要有“净观”，视众生为情境，视轮回、涅槃为同样清净。\n2、禅定 奢摩他很简单。坐直，专注于呼吸，这就是你要坐的。你要保持简单，不要复杂化。呼吸就发生在当下，不在过去，不在未来，这就是为什么我认为运用呼吸很好。呼吸发生在每时每刻——吐气时，它离开、结束，永远不再回来，然后我们再次吸气。\n3、十二缘起法 佛教说明三世轮回的基本理论，包括无明、行、识、名色、人 、触、受、爱、取、有、生、老死十二个部分。\n4、无明 无明实际上就是对标签的稚拙。在所有标签当中，最具有破坏性，最难以琢磨的标签就是“自我”、“我的”或“我”。\n猪代表无明，从无明产生渴求，渴求是贪欲之母；从无明也产生恐惧，恐惧时嗔恨之母。所以我们有三种基本的心理，是这三者在感知事务，它们以多种不同的方式去感知事物。\n5、根据佛教，生命只是感知，一种相继不断的感知。\n6、我们有六道。大体而言，当感知来自嗔恨时，你时在体验地狱道；当感知来自执著、执取或贪吝，你在体验饿鬼道；当你的感知通过无明过滤，你在经验畜生道；当你生出很强的满心，你就投生到天道；生出嫉妒心，投生到阿修罗道；而当你贪欲炽盛时，你投生到人道。\n7、处于正常状态的心，即是智慧。 大乘佛教最重要的特征是般若——根本的智慧。其他的特质，比如布施、持戒、道德，都次于智慧。\n8、整个佛法基本上就像一种安慰剂。 不过，即便我们所热爱的修道是一场骗局，即使它是安慰剂，它确实必要的安慰剂。为什么？因为我们有各种各样的执著、束缚和串习，必须被斩断。藏语中的“Dorje Churpa” 或梵文中的 “Vajracchedika”，有很多不同的译法，中文往往翻译为“金刚能断”（能断骗局之金刚），很多藏文翻译成“能断金刚的智慧”。\n9、“我”只不过是贴在由诸蕴组合而成的几个实体上的标签。\n10、出离心 出离的标准定义是：了知执著是无用、无自性的，所以我们应该摆脱它们。\n11、般若波罗蜜 “般若”意味着至高的心、最高的智力，而“波罗蜜”的意思是，甚至超越它。\n12、痛苦从何而来？很清楚的，它来自相互依存（缘起）的不确定性。任何相互依存的，基本上都不确定。我们希望得到理想中的和平与宁静，却无法确定能拥有它，因为我们的理想得依赖我们无法控制得条件。\n13、什么是能力呢？就是觉得自在，无障碍，没有被剥夺或者缺乏什么。\n","permalink":"https://deewooo.github.io/post/%E4%BA%BA%E9%97%B4%E6%98%AF%E5%89%A7%E5%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/","tags":["宗萨蒋扬钦哲仁波切","土猫读书"],"title":"《人间是剧场》 读书笔记"},{"categories":["技术"],"contents":"自己的小站还是一个实验田，没有明确的目的，更不想费心运营，所以并不想去备案，希望保持一个自由的初心，所以就把主机放到aws的美东机房。但是由于众所周知的原因，访问速度慢到令人发指，不上缓存的话，一次打开时间超过了1分钟，因此不得不认真考虑优化的问题。\n1 网站部署情况  aws美东主机，免备案，作为域名源站，使用nginx转发； 阿里云ecs，建站，可通过ip+端口访问；  2 问题分析与定位 用firefox检查了一下小站主页的加载耗时情况，发现存在几个问题：\n  cdn解析时间过长，每个资源的cdn解析时间超过了1s； 页面内嵌的GoogleAnalytics的js代码，访问google地址时间过长超过了4s； js和css等静态资源加载时间过长； 图片资源加载时间过长   分析一下，发现根本原因都是资源要访问在美国的主机造成的。因为一次国内的请求，要先解析到美东aws主机，再通过nginx转发到杭州ecs，光建立连接就往返了两次太平洋。\n针对主机在海外这个情况，分析目前的问题，我的想法是：\n  尽量将静态资源分流出去，使浏览器不需要通过海外主机即可获取到资源; GoogleAnalytics方式由页面加载js，改成nginx转发，以减少页面的无关资源； nginx加缓存，减少主机转发的时间；   下面就一步一步来落实。\n3 静态资源分流 所谓静态资源是指不需要后端服务处理，服务器直接把相应资源发送到客户端。一个网站的静态资源一般包括js/css/img/webfont这些，将这些资源放到访问性能更好的地址，用户的浏览器就不用通过aws获取了。 我用以下几个方法来对资源做分流：\n  依赖的js和css组件库，引用地址换成BootCDN提供的CDN 加速服务； 自定义的js、css和img文件，放到阿里云的oss中； 整站上cdn。   前两个方法本身不用多说。\n BootCDN 是 Bootstrap 中文网支持并维护的前端开源项目免费 CDN 服务，致力于为 Bootstrap、jQuery、Angular、Vuejs 一样优秀的前端开源项目提供稳定、快速的免费 CDN 加速服务。BootCDN 所收录的开源项目主要同步于 cdnjs 仓库。\n 感谢BootCDN免费提供这么好的服务，有兴趣的朋友请点击这里。\n整站上cdn遇到的问题 我选择了CloudFlare，原因还是坚持免备案原则，国内就没有免备案的服务商。\n  按照提示，添加域名，一路完成设置，等生效； 添加子域名解析，等生效。   等了一个晚上，访问各个子域名对应的站点发现悲剧了，几乎全部子域名的网站都提示“将您重定向的次数过多”，Chome 中的报错信息为「ERR_TOO_MANY_REDIRECTS」，这是怎么回事？ 仔细分析之后找到了原因。 这种错误是由 Cloudflare SSL 设置不当造成的。 这个问题在《WordPress 网站使用 CloudFlare 后提示“将您重定向的次数过多” 的原因及解决办法》这篇文章里有详细说明。\nCloudflare Crypto 的 SSL 中有 4 个选项（如下），其中 Off 就是不启用 SSL，通过 HTTP 协议访问网站。另外 3 种是通过 HTTPS 协议访问网站。\n 我将SSL的设置选择了Full。之后，问题解决。\n4 使用Nginx将请求转发至Google Analytics实现后端统计 原有页面加载统计js这种方案的缺点是：\n  客户端到 Google Analytics 之间的网络问题，包括 analytics.js 脚本加载缓慢、向 Google Analytics 发送信息速度缓慢乃至失败等问题。由于各地网络情况不一，唯一通用的解决方案需要自己反向代理一个 analytics.js 脚本，并且由服务器中转向 Google Analytics 发送信息的通讯。 客户端屏蔽 Google Analytics 的相关问题，包括常见的 ad­block 扩展等自带的屏蔽列表，利用 user­script 进行屏蔽等方式，这些客户端的手段都会导致统计的偏差问题。   如果将 Google Analytics 的统计工作从前端转移到后端完成，就可以有效避免上述问题，直接使用 Nginx 自身的功能就可以完成这一工作。\n此方案的优点是：\n  只需考虑服务器到 Google Analytics 的速度，不影响客户端的体验。 统计数据真实准确，不受干扰与屏蔽。 用户使用的语言可以通过浏览器发送的 Accept-Language 获得用户设定的 Preferred language，而 js 脚本只能获得浏览器安装时选择的语言。 配置简单方便，不需要额外安装 Nodejs 等程序和包管理器，使用 Nginx 自身的功能即可完成。   Nginx配置 nginx 配置 server 块内加入以下内容\nuserid on; userid_name cid; userid_domain moonagic.com; userid_path /; userid_expires max; if ($http_accept_language ~* '^(.+?),') { set $first_language $1; } location @tracker { resolver 8.8.8.8 ipv6=off; # 需要设定dns,不然无法解析.不支持ipv6的机器需要关闭ipv6 internal; proxy_method GET; proxy_pass https://www.google-analytics.com/collect?v=1\u0026amp;tid=UA-*******-*\u0026amp;$uid_set$uid_got\u0026amp;t=pageview\u0026amp;dh=$host\u0026amp;dp=$request_uri\u0026amp;uip=$remote_addr\u0026amp;dr=$http_referer\u0026amp;ul=$first_language\u0026amp;z=$msec; proxy_set_header User-Agent $http_user_agent; proxy_pass_request_headers off; proxy_pass_request_body off; } 并在指向root的时候添加\nlocation / { root /content/path/; post_action @tracker; ... } 或者bypass的时候\nlocation / { proxy_pass http://127.0.0.1:8081; post_action @tracker; ... } 这样配置以后各种文件的访问都会被记录,其中就包括js,css,xml这种实际上我们不需要统计的访问. 解决的办法也很简单,利用Nginx配置将这些静态资源的访问过滤掉就好. 比如:\nlocation ~ .*\\.(css|js|ico|jpg|woff|png|txt|xml|ttf)$ { root /content/path/; or proxy_pass http://127.0.0.1:8081; } 不过我的小站目前的静态资源已经全放出去了，所以这个问题还好。\n5 给nginx加缓存 这个就不分析了，直接上配置。\n在http块中加上这段配置\nhttp{ proxy_cache_path /path/to/cache levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off; server{ ... } } 在server配置中的location块，增加这段配置\nserver{ ... location / { proxy_cache my_cache; proxy_pass http://127.0.0.1:8081; proxy_cache_valid 200 206 304 301 302 10d; proxy_cache_valid any 1m proxy_buffer_size 128k; proxy_buffers 32 256k; proxy_busy_buffers_size 256k; } ... } 重要配置项介绍：\n Proxy_cache my_cache：使用名为my_cache的对应缓存配置 proxy_cache_valid 200 206 304 301 302 10d： 对httpcode为200…的缓存10天  至此，最基本的nginx缓存功能就配置成功了\n6 优化效果 什么都不如实测有力量，用站长工具中的国内网站测速跑一下，下面是测速结果图\n 效果比之前已经好太多了。第一次整站优化，已经达到初步效果。\n  本文链接：https://deewooo.github.io/post/%E5%BB%BA%E7%AB%99%E7%AC%AC%E5%85%AD%E7%AF%87-%E5%B0%8F%E7%AB%99%E4%BC%98%E5%8C%96%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6%E4%BA%8C%E4%B8%89%E4%BA%8B/\n本作品由 IvyWooo 采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，转载请注明出处。\n  参考文章\n 《本博客零散优化点汇总》，https://imququ.com/post/summary-of-my-blog-optimization.html 《WordPress 网站使用 CloudFlare 后提示“将您重定向的次数过多” 的原因及解决办法》，https://www.wpzhiku.com/wordpress-wang-zhan-shi-yong-cloudflare-hou-ti-shi-jiang-nin-chong-ding-xiang-de-ci-shu-guo-duo-de-yuan-yin-ji-jie-jue-ban-fa/ 《Nginx 异步处理Google Analytics》，https://www.gubo.org/nginx-forward-google-analytics-optimized-loading-speed/ 《在Nginx中配置Google-Analytics》，https://moonagic.com/google-analytics-with-nginx/ 《Nginx 对接 Google Analytics》，https://blog.huguotao.com/post/google-analytics-with-nginx 《Nginx 内配置 Google Analytics 指南》，https://darknode.in/network/nginx-google-analytics/ 《nginx proxy_cache 缓存配置》，https://blog.csdn.net/dengjiexian123/article/details/53386586  ","permalink":"https://deewooo.github.io/post/%E5%BB%BA%E7%AB%99%E7%AC%AC%E5%85%AD%E7%AF%87-%E5%B0%8F%E7%AB%99%E4%BC%98%E5%8C%96%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6%E4%BA%8C%E4%B8%89%E4%BA%8B/","tags":["nginx","aws","CloudFlare","建站"],"title":"建站第六篇 小站优化访问速度二三事"},{"categories":["技术"],"contents":"1 什么是内网穿透 简单来说，内网穿透是一种实现不同局域网内的主机之间通过互联网进行通信的技术。\n内网穿透，即NAT穿透，NAT英文全拼是Network Address Translator(网络地址转换器)，说白了就是凡是经过NAT发出去的数据包，都会通过一定的端口转换（而非使用原端口）再发出去，也就是说内网和外网之间的通信不是直接由内网机器与外网NAT进行，而是利用内网对外网的NAT建立起SESSION与外网NAT的SESSION进行。\n 目前可用于内网穿透的开源工具主要有：ngrok和frp。\n ngrok。ngrok 是一个反向代理，通过在公共的端点和本地运行的 Web 服务器之间建立一个安全的通道。支持TCP协议，不支持UDP协议。ngrok有两个大版本，1.*开源在github，用golang编写。2.*闭源。速度方面，不如frp。 frp。frp同样开源，同样用golang编写。frp支持UDP协议。frp的配置十分简单省心，功能也令人满意。  2 为什么选择frp Frp是在github上的完全开源项目，作者是中国人而且项目还在维护中。文档比较详细，可自行搭建，速度不错且理论上可以开放任何想要的端口。\n3 什么是frp 根据官网定义：\n frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。\n 4 怎么配置frp 先看看frp的架构\n 从图中可以看出，我们需要：\n 一个有公网ip的主机，部署frps n个需要被访问的内网服务器，分别部署frpc  用户通过公网ip访问frps，再映射到对应的内网服务器。 下面一起来看看frp是怎么配置的，本文仅介绍tcp的配置。\n4.1 安装frp 不论对于服务端还是客户端，安装过程都是一样的。以下是官方说明：\n 根据对应的操作系统及架构，从 Release 页面下载最新版本的程序。 将 frps 及 frps.ini 放到具有公网 IP 的机器上。 将 frpc 及 frpc.ini 放到处于内网环境的机器上。\n 4.2 通过 ssh 访问内网机器 修改 frps.ini 文件，这里使用了最简化的配置：\n frps.ini  [common] bind_port = 7000  启动 frps：  ./frps -c ./frps.ini 修改 frpc.ini 文件，假设 frps 所在服务器的公网 IP 为 x.x.x.x；\n frpc.ini  [common] server_addr = x.x.x.x server_port = 7000 [ssh] type = tcp local_ip = 127.0.0.1 local_port = 22 remote_port = 6000   启动 frpc： ./frpc -c ./frpc.ini\n  通过 ssh 访问内网机器，假设内网用户名为 test：\n  ssh -oPort=6000 test@x.x.x.x 或 ssh -p 6000 test@x.x.x.x ssh的配置是tcp转发的最简配置，也可以用于没有域名的web服务转发，只需要frpc配置好需要映射的端口号即可。\n比如在内网搭建了一个web服务，访问端口号是9000，可以在frpc.ini中这样配置。\n[web] type = tcp local_ip = 127.0.0.1 local_port = 9000 remote_port = 10000 然后开放公网ip主机的10000端口，这样就可以通过http://公网ip:10000来访问内网的web服务。\n  本文链接：https://deewooo.github.io/post/%E5%BB%BA%E7%AB%99%E7%AC%AC%E4%BA%94%E7%AF%87-%E4%BD%BF%E7%94%A8frp%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/ 本作品由 IvyWooo 采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，转载请注明出处。\n  参考文章\n《frp官方文档》，https://github.com/fatedier/frp/blob/master/README_zh.md#%E9%80%9A%E8%BF%87-ssh-%E8%AE%BF%E9%97%AE%E5%85%AC%E5%8F%B8%E5%86%85%E7%BD%91%E6%9C%BA%E5%99%A8\n","permalink":"https://deewooo.github.io/post/%E5%BB%BA%E7%AB%99%E7%AC%AC%E4%BA%94%E7%AF%87-%E4%BD%BF%E7%94%A8frp%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/","tags":["frp","内网穿透","建站"],"title":"建站第五篇 使用frp实现内网穿透"},{"categories":["技术"],"contents":"1 什么是calibre-web 我自己一直在用Calibre管理mac上的本地图书，说是世界上最好的电子书管理解决方案一点也不过分，时间久了就会想有没有web版，可以突破本地服务的局限，为自己的各种终端提供电子书服务。 Calibre-web可以说就是calibre的web版，它 提供了用户友好的对外网页展示的形式，可以在网上展示，管理，浏览自己的书籍，让书跟着自己走。 Calibre-web 的 GitHub 地址在 这里\n2 安装clibre-web的docker镜像 Docker的安装，在《建站第三篇 使用Docker安装Jellyfin媒体服务器》一文中已经讲过，这里直接部署calibre-web。\n2.1 选择镜像源  先上命令  docker run -d --name=calibre -p 8083:8083 -v /calibre/config:/config -v /media/ivy/新加卷/书籍:/books technosoft2000/calibre-web 这里说明一下，docker镜像有两个：technosoft2000/calibre-web和linuxserver/calibre-web。 两者的区别是： technosoft2000自带Calibre电子书转换，linuxserver没有，linuxserver更轻量一些。\n我选择使用technosoft2000/calibre-web，耐心等待镜像下载完毕，以为会像jellyfin那样，启动即可以访问，然而还是too naitive！在浏览器中输入ip:8083，回车。看到的页面是这样的\n 用telnet测试，结果是这样的。\n 难道docker镜像还有需要手动开启端口？用iptable-save检查了防火墙端口情况，并没有什么异常，但calibre-web始终启动不了。 只好去查日志，看看到底出了什么问题，命令用这个\ndocker logs -f -t --tail 500 calibre 最后一行果然报了一个错：\n 2019-07-07T19:37:46.808133534Z /usr/bin/python: can\u0026rsquo;t open file \u0026lsquo;/calibre-web/app/cps.py\u0026rsquo;: [Errno 2] No such file or directory\n 怎么可能没有cps.py文件呢？这可是calibre的关键启动文件。再继续往前翻日志，发现了一行可疑的信息：\n 2019-07-07T18:07:17.678190883Z [INFO] \u0026hellip; git clone -b master \u0026ndash;single-branch https://github.com/janeczku/calibre-web.git /calibre-web/app -v 2019-07-07T18:07:17.862018388Z Cloning into \u0026lsquo;/calibre-web/app\u0026rsquo;\u0026hellip; 2019-07-07T18:07:21.811325140Z POST git-upload-pack (189 bytes) 2019-07-07T18:33:32.070402321Z error: RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 104\n 原来镜像先用git clone从github拉代码，结果拉失败了，什么都没有拉下来。网络环境没法改变，另一个镜像linuxserver/calibre-web也存在同样的问题。那么只好去寻找别的镜像源。\n十分幸运，让我找到了一个不需要从github上拉代码同时也带有ebook-convert转换工具的镜像版本，dockerhub上的地址在这里，镜像作者的博客文章地址在这里,在此感谢镜像作者的分享。 接下来就好办了，让我们按部就班的开始吧。\n2.2 部署calibre-web  拉镜像  docker pull ctiself/calibre-web  创建容器  docker create --name=calibre -v /calibre/config:/config -v /media/ivy/新加卷/书籍:/books -p 8083:8083 ctiself/calibre-web  启动容器  docker start calibre  再看看日志 docker logs -f -t --tail 500 calibre 这次信息很干净    在浏览器中输入ip:8083，出现站点配置页面，这表明calibre-web安装完毕。   3 配置calibre-web  配置书库路径    端口设置为8083，如果想用https，将pem和key文件放入config文件夹内    指定日志文件路径    设置转换程序的路径     提交设置后，就可以点登陆按钮，第一次的默认用户名和密码时admin,admin123。 放一张上传好电子书的首页图   至此，calibre-web安装完毕。\n    本文链接：https://deewooo.github.io/post/建站第四篇-使用Docker部署calibre-web私人云书库/ 本作品由 IvyWooo 采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，转载请注明出处。\n  参考文章\n 《使用Docker 部署calibre-web》，https://www.crazymonkmind.com/archives/159.html 《自己制作内置calibre程序的calibre-web docker镜像》，https://www.crazymonkmind.com/archives/200.html  ","permalink":"https://deewooo.github.io/post/%E5%BB%BA%E7%AB%99%E7%AC%AC%E5%9B%9B%E7%AF%87-%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2calibre-web%E7%A7%81%E4%BA%BA%E4%BA%91%E4%B9%A6%E5%BA%93/","tags":["Docker","calibre Web","建站"],"title":"建站第四篇 使用Docker部署calibre Web私人云书库"},{"categories":["技术"],"contents":"1 前言 随手浏览简书时，翻到一篇文章《服务器指北 - 有了服务器之后可以做点什么》，我平时就喜欢在家里搞东搞西，这标题正对胃口。毫不犹豫的点进去看看有什么新东西能用在家里的山寨服务器上。果然没让我失望，里面提到一个影音管理系统叫做jellyfin，从之前的 emby fork 而来，由于 emby 闭源了，大家就在这基础上分支出了 Jellyfin。\n特性嘛？\n 用户体验方面，据说可以便携地管理自己的电影和番剧，可以自动识别和添加相关的信息，这个肯定是爽的了，免得家里那只完全没有脑细胞也不爱学习的猫咪总是叫唤着我搞得各种东西不好玩，不靠谱。 搭建成本方面，据说可以配合云存储，那我想本地存储肯定也是支持的了，家里的影音站下载部分已经使用小米mini路由+可休眠硬盘盒方案了，缺一个播放UI，一直用smb共享路径来播放，jellyfin刚刚好填补了这个空白，没有附加成本，只有搭建jellyfin自己的成本，不错。 搭建方式方面，jellyfin支持docker安装，我一直对docker兴趣十足又没有亲手撸过。经过了这么多年，docker的各种应用场景和生态渐渐的成熟起来了，使用docker镜像搭建服务越来越简单便捷，正好可以借机在家里搭建第一个docker服务。  话不多说，让我们直奔主题吧。\n2 准备 我的家庭nas服务器系统的版本是ubuntu16.04，是用一个acer旧笔记本改的，原来的硬盘容量已经很小了，只能用来跑系统，存储全部使用外挂方式，用来存储自己的本地资料以及搭建云盘和云笔记的数据资料，影音文件也在其中。 我选择搭建docker版jellyfin，影音库直接挂到外存中的影音文件夹，不需要对原有资料路径做任何变动。\n3 动手干 3.1 安装docker  添加 Docker 软件源  apt-get update apt-get install apt-transport-https ca-certificates curl software-properties-common curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add - add-apt-repository \u0026quot;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu $(lsb_release -cs) stable\u0026quot;  安装 Docker CE（社区版）  sudo apt-get update -y sudo apt-get install docker-ce -y  设置开机启动  sudo systemctl enable docker sudo systemctl start docker  测试 docker  docker run hello-world 当看到这段文字时，说明docker安装成功了。\nHello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \u0026quot;hello-world\u0026quot; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ 至此，Docker安装最简版，完成。没有像其他文章提到的配置镜像站，也没有分配用户权限。没分配用户权限不是好的示范，不提倡学习，但是我这边自家内网使用，一切从简。 下面开始使用docker来搭建本文的主角——Jellyfin服务。\n3.2 拉取Jellyfin的docker镜像  首先，dockerhub上已经发布了jellyfin的docker镜像，https://hub.docker.com/r/jellyfin/jellyfin，按照说明，只需要一行命令  docker pull jellyfin/jellyfin 然而我并不是这样做的。因为懒，直接docker安装了。\n 这是安装命令  docker run -d -p 8096:8096 -v /jellyfin/config:/config -v /media/ivy/新加卷/影音视频:/media jellyfin/jellyfin 上面的参数中需要说明的是：\n  -p 后面是jellyfin服务的端口号，安装时可以指定，这里使用默认的8096； -v 后面是指定的配置路径，比如/media/ivy/新加卷/影音视频就是我原来的影音物理路径，/media就是jellyfin的映射路径   docker会自动拉取镜像完成安装 如果能看到上面的画面，说明jellyfin安装完成，就是这么便捷！！！！docker越来越成功果然是有道理的。 现在就可以通过http://本地ip:8096来访问jellyfin服务了。\n3.3 Jellyfin参数配置   一进来就看到引导页面，选择语言   设置管理账号密码   配置媒体库   可以将不同种类的片源分开管理，比如电影、电视剧   后面该怎么选怎么选，电影路径、电视剧路径，语言神马的。最后注意一下远程访问的两个勾，默认是打上的。 这样，我们的jellyfin服务就安装好了。\n3.4 内网穿透 虽然是内网服务，还是会禁不住得瑟的心，弄个公网地址给朋友看看，所以就有了内网穿透。 内网穿透工具采用Frp，轻与简单是我选择工具的个人偏好。 服务端扔阿里云上，内网安装客户端，配上端口\n[tcp_jellyfin] type = tcp local_port = 8096 remote_port = 9096 我把ecs中的web服务端口都配成9***，方便管理。\n启动frpc\n./frpc -c frpc.ini 现在，访问ecs的公网ip:9096就能访问自己的Jellyfin了。\n3.5 运行效果 来张整体图，能看到不同的媒体库以及各自的更新进度。 可以在首页直接打开视频 也可以点击进入影片介绍页，是的，jellyfin居然还有影片介绍页，我们只需要提供合规格命名的片源，其他的都交给jellyfin吧。 截图时是在公网，网速不佳，不然是可以看到演员的照片，还会推荐本地存储的相关影片，这个有点逆天了，查了一下这是从emby带出来的功能，强大的搜刮能力。 补一张卡司图 还可以进入演员详情页 Ok，不管从哪个路径进来，最终还是要播放影片。播放效果是这样滴 内网使用，还是非常流畅的。\n4 总结  第一次安装docker，不顺利是正常的，趟坑也是一种快乐。 使用docker镜像的方式安装服务确实非常方便快捷，如果以后docker服务越来越多了，可能需要上K8s，不过那是很远的事情了。 以前没使用过emby，这次直接上Jellyfin，体验太惊艳了，没想到这么棒，但毕竟主服务器的性能并不是很棒，可以估计到解码开销会比较大，以后等kodi的插件完善了，使用kodi配合Jellyfin也许效果更好。    本文链接：[https://deewooo.github.io/post/建站第三篇-使用Docker安装Jellyfin媒体服务器/) 本作品由 IvyWooo 采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，转载请注明出处。\n  参考文章 《Ubuntu 16.04 安装 Docker 和 Docker Compose 》，https://www.rabbitwfly.com/articles/2019/05/14/1557827886665.html 《在群晖Docker中安装Jellyfin媒体服务器 》，https://www.smbinn.com/jellyfin.html\n","permalink":"https://deewooo.github.io/post/%E5%BB%BA%E7%AB%99%E7%AC%AC%E4%B8%89%E7%AF%87-%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85Jellyfin%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/","tags":["docker","jellyfin","建站"],"title":"建站第三篇 使用Docker安装Jellyfin媒体服务器"},{"categories":["技术"],"contents":"是什么 逛知乎的时候，看到一个帖子介绍自己的服务器上所跑的服务，里面提到一个监控工具叫做uptimerobot，于是谷歌了一下来科普，官网介绍在这里(https://uptimerobot.com/about),里面这样说：\nEveryone with a website knows that, things can sometimes go wrong. Sometimes it is with the code, the server or the network.... Uptime Robot is all about helping you to keep your websites up. It monitors your websites every 5 minutes and alerts you if your sites are down (actually, it is smarter, details below).  总的来说，UpTimeRobot提供网站监控服务，用来检查你的网站的健康程度，至少每5分钟检查一次（长周期可以自定义），最多可以监控50个网站。 最重要的是，该服务是完全免费的。\n怎么用 先放上官网地址：https://uptimerobot.com。要注册，用邮箱就可以啦。 然后登录进来看仪表盘（https://uptimerobot.com/dashboard#mainDashboard）。 官方提供4种监控方式：Http(s)、Keyword、Ping、Port。\n HTTP：通过访问的方式来监控，一般网页可以用这种 PING：通过 PING 域名或者 IP 来监控，网站、服务器 IP 等都可以 PORT：访问某个端口是否开启进行监控 KEYWORD：用于检测某网站是否出现某关键词，可以设置为“出现xxx关键词”或者“关键词xxx消失”则邮件通知我。（出处：https://www.newlearner.site/2018/11/26/uptime-robot.html）\n 我选择Http(s)来监控我的两个站点，间隔是24小时，自己的小站高可用要求不那么高。\n截个图看一眼长啥样。 呐，只是简单的健康监控，没有太多指标，它能够做到的是当监控到异常的时候，发邮件到你指定的邮箱中通知你。非常方便简单。\n","permalink":"https://deewooo.github.io/post/%E5%BB%BA%E7%AB%99%E7%AC%AC%E4%BA%8C%E7%AF%87-%E4%BD%BF%E7%94%A8uptimerobot%E5%85%8D%E8%B4%B9%E7%9B%91%E6%8E%A7%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1/","tags":["uptimerobot","建站"],"title":"建站第二篇 使用uptimerobot免费监控自己的服务"},{"categories":null,"contents":"Clean White Theme for Hugo CleanWhite is a clean, elegant, but fully functional blog theme for Hugo. Here is a live demo site using this theme.\nIt is based on huxblog Jekyll Theme and Clean Blog Jekyll Theme.\nThese two upstream projects have done awesome jobs to create a blog theme, what I\u0026rsquo;m doing here is porting it to Hugo, of which I like the simplicity and the much faster compiling speed. Some other features which I think could be useful, such as site search with algolia and proxy for Disqus access in China, have also been built in the CleanWhite theme. Other fancy features of upstream projects are not supported by this Hugo theme, I\u0026rsquo;d like to make it as simple as possible and only focus on blog purpose, at least for now. While I created this theme, I followed the Hugo theme best practice and tried to make every part of the template as a replaceable partial html, so it could be much easier for you to make your customization based on it.\nScreenshots Home Post Search Disqus Wechat Pay \u0026amp; Alipay Quick Start Go to the directory where you have your Hugo site and run:\n$ mkdir themes $ cd themes $ git clone https://github.com/zhaohuabing/hugo-theme-cleanwhite.git If your site is already a git project, you may want to choose to add the cleanwhite theme as a submodule to avoid messing up your existing git repository.\n$ mkdir themes $ git submodule add https://github.com/zhaohuabing/hugo-theme-cleanwhite.git themes/hugo-theme-cleanwhite Run Hugo Build-in Server Locally\n$ hugo serve -t hugo-theme-cleanwhite Now enter localhost:1313 in the address bar of your browser.\nIf you start from scratch, there is a working Hugo site configured with the CleanWhite theme in the exampleSite directory. You can use it as a starting point for your site.\nFor more information read the official setup guide of Hugo\nConfiguration First, let\u0026rsquo;s take a look at the config.toml. It will be useful to learn how to customize your site. Feel free to play around with the settings.\nComments The optional comments system is powered by Disqus. If you want to enable comments, create an account in Disqus and write down your shortname.\ndisqusShortname = \u0026#34;your-disqus-short-name\u0026#34; You can disable the comments system by leaving the disqusShortname empty.\nDisqus in China Disqus is inaccessible in China. To get it to work, we can set up a proxy with disqus-php-api in a host which sets between the client browser and the Disqus server. The idea is that if Disqus can be reached in the guest network, the blog page will show the original Disqus comments UI, otherwise, it will downgrade and use the proxy to access the Disqus, the UI will be a little different, but the visitors can still write their comments on the page.\nThe client side java script has already been integrated to CleanWhite them, but you need to set up a proxy server yourself.\nThe proxy is written in php, which can be found here: https://github.com/zhaohuabing/disqus-php-api/tree/master/api\nYou need to specify your Disqus account information in the config.php.\ndefine('PUBLIC_KEY', ''); define('SECRET_KEY', ''); define('DISQUS_USERNAME', ''); define('DISQUS_EMAIL', ''); define('DISQUS_PASSWORD', ''); define('DISQUS_WEBSITE', ''); define('DISQUS_SHORTNAME', ''); Set the proxy server address in the site config file of your Hugo project.\ndisqus_proxy = \u0026#34;http://yourdisqusproxy.com\u0026#34; Site Search with Algolia Follow this tutorial to create your index in Algolia. The index is just the storage of the indexing data of your site in the the cloud . The search page of CleanWhite theme will utilize this indexing data to do the search.\nGo to the directory where you have your Hugo site and run the following commands:\n$ npm init $ npm install atomic-algolia --save Next, open up the newly created package.json, where we’ll add an NPM script to update your index at Algolia. Find \u0026ldquo;scripts\u0026rdquo;, and add the following:\n\u0026quot;algolia\u0026quot;: \u0026quot;atomic-algolia\u0026quot; Algolia index output format has already been supported by the CleanWhite theme, so you can just build your site, then you’ll find a file called algolia.json in the root, which we can use to update your index in Algolia. Generate index file:\n$ hugo Create a new file in the root of your Hugo project called .env, and add the following contents:\nALGOLIA_APP_ID={{ YOUR_APP_ID }} ALGOLIA_ADMIN_KEY={{ YOUR_ADMIN_KEY }} ALGOLIA_INDEX_NAME={{ YOUR_INDEX_NAME }} ALGOLIA_INDEX_FILE={{ PATH/TO/algolia.json }} Now you can push your index to Algolia by simply running:\n$ npm run algolia Add the following variables to your hugo site config so the search page can get access to algolia index data in the cloud:\nalgolia_search = true algolia_appId = {{ YOUR_APP_ID }} algolia_indexName = {{ YOUR_INDEX_NAME }} algolia_apiKey = {{ YOUR_SEARCH_ONLY_KEY }} Open search page in your browser: http://localhost:1313/search\nAnalytics You can optionally enable Google or Baidu Analytics. Type your tracking code in the\ngoogleAnalytics = \u0026#34;UA-XXXXX-X\u0026#34; ba_track_id = \u0026#34;XXXXXXXXXXXXXXXX\u0026#34; Leave the googleAnalytics or \u0026lsquo;ba_track_id ' key empty to disable it.\nWechat Pay \u0026amp; Alipay Rewards You can enable Wechat Pay \u0026amp; Alipay to allow readers send you money. So if they like your articles, you may even get rewards from your writing. Now you must be motivated to write more.\n Enable Wechat Pay \u0026amp; Alipay in the site config  reward = true  Replace the QR codes of Wechat Pay \u0026amp; Alipay by overriding the photos in folder /static/img/reward/, otherwise the money will be sent to my accounts!  Thank Thanks for the great jobs of huxblog Jekyll Theme and Clean Blog Jekyll Theme which are the the two upstream projects CleanWhite Hugo theme is based on.\nFeedback If you find any problems, please feel free to raise an issue or create a pull request to fix it.\nIf it\u0026rsquo;s helpful for you, I would appreciate it if you could star this repository, thanks!\n","permalink":"https://deewooo.github.io/post/readme/","tags":null,"title":"Clean White Theme for Hugo"},{"categories":["技术"],"contents":"这是去年4月的一次自建笔记服务的记录，在这里也做个记录，有前辈说，备份不怕多，我也觉得应是如此。\n 这些年，笔记搬家了3次，又不喜欢笔记本地化，一直想搭一个基于开源产品的笔记服务，磨蹭到今天，终于搭建了属于自己的笔记服务器，还有太多的不足，先初步用起来再说。 按照官网wiki操作记录 ##安装步骤：\n 安装leanote 安装mangodb 导入初始数据 配置leanote 启动leanote   1. 安装leanote 从官网下载相应的二进制包,这里选择的版本是：leanote-linux-amd64-v2.6.1.bin.tar.gz，通过ftp上传到 /opt下，解压\ncd /opt tar -xzvf leanote-linux-amd64-v2.6.1.bin.tar.gz   ##2. 安装mangodb ###2.1 安装mangodb 从官方下载安装包解压安装失败，最后采用apt安装方式，安装成功\napt install mongodb-server  ###2.2 确认安装成功 在/opt下创建目录data，用来存放mangodb数据\nmkdir /opt/data  启动mangodb\nmongod --dbpath /opt/data/  进入mangodb交互程序\n$\u0026gt; mongo \u0026gt; show dbs leanote 0.078GB local 0.078GB \u0026gt; use leanote switched to db leanote \u0026gt; db.users.find() { \u0026quot;_id\u0026quot; : ObjectId(\u0026quot;5368c1aa99c37b029d000001\u0026quot;), \u0026quot;CreatedTime\u0026quot; : ISODate(\u0026quot;2014-05-06T11:04:10.658Z\u0026quot;), \u0026quot;Email\u0026quot; : \u0026quot;admin@leanote.com\u0026quot;, \u0026quot;LeftIsMin\u0026quot; : false, \u0026quot;NoteListWidth\u0026quot; : 266, \u0026quot;NotebookWidth\u0026quot; : 160, \u0026quot;Pwd\u0026quot; : \u0026quot;此处马赛克\u0026quot;, \u0026quot;Theme\u0026quot; : \u0026quot;simple\u0026quot;, \u0026quot;ThirdType\u0026quot; : 0, \u0026quot;ThirdUserId\u0026quot; : \u0026quot;\u0026quot;, \u0026quot;ThirdUsername\u0026quot; : \u0026quot;\u0026quot;, \u0026quot;Username\u0026quot; : \u0026quot;admin\u0026quot;, \u0026quot;UsernameRaw\u0026quot; : \u0026quot;admin\u0026quot;, \u0026quot;Verified\u0026quot; : false, \u0026quot;mdEditorWidth\u0026quot; : 0, \u0026quot;Usn\u0026quot; : 200044, \u0026quot;Logo\u0026quot; : \u0026quot;\u0026quot; } { \u0026quot;_id\u0026quot; : ObjectId(\u0026quot;540817e099c37b583c000001\u0026quot;), \u0026quot;CreatedTime\u0026quot; : ISODate(\u0026quot;2014-09-04T07:42:24.064Z\u0026quot;), \u0026quot;Email\u0026quot; : \u0026quot;demo@leanote.com\u0026quot;, \u0026quot;LeftIsMin\u0026quot; : false, \u0026quot;NoteListWidth\u0026quot; : 0, \u0026quot;NotebookWidth\u0026quot; : 0, \u0026quot;Pwd\u0026quot; : \u0026quot;此处马赛克\u0026quot;, \u0026quot;Theme\u0026quot; : \u0026quot;\u0026quot;, \u0026quot;ThirdType\u0026quot; : 0, \u0026quot;ThirdUserId\u0026quot; : \u0026quot;\u0026quot;, \u0026quot;ThirdUsername\u0026quot; : \u0026quot;\u0026quot;, \u0026quot;Username\u0026quot; : \u0026quot;demo\u0026quot;, \u0026quot;UsernameRaw\u0026quot; : \u0026quot;demo\u0026quot;, \u0026quot;Verified\u0026quot; : false, \u0026quot;Usn\u0026quot; : 200006 }   ##3. 导入初始数据 安装leanote后，初始数据存放在 /opt/leanote/mongodb_backup/leanote_install_data中。\nmongrestore -h localhost -d leanote --dir /opt/leanote/mongodb_backup/leanote_install_data  初始数据的users表中已有2个用户:\nuser1 username: admin, password: abc123 (管理员, 只有该用户才有权管理后台, 请及时修改密码) user2 username: demo@leanote.com, password: demo@leanote.com (仅供体验使用)   ##4. 配置leanote leanote的配置存储在文件 conf/app.conf 中。\n请务必修改app.secret一项, 在若干个随机位置处，将字符修改成一个其他的值, 否则会有安全隐患!\n ##5. 启动leanote 注意: 在此之前请确保mongodb已在运行! 运行\n$\u0026gt; cd /opt/leanote/bin  $\u0026gt; bash run.sh \u0026amp;\n出现一下信息证明运行成功\n... TRACE 2013/06/06 15:01:27 watcher.go:72: Watching: /home/life/leanote/bin/src/github.com/leanote/leanote/conf/routes Go to /@tests to run the tests. Listening on :9000...  在浏览器输入 http://XXX.XXX.XXX.XXX:9000 XXX.XXX.XXX.XXX是阿里云的ecs公网ip\n","permalink":"https://deewooo.github.io/post/%E5%BB%BA%E7%AB%99%E7%AC%AC%E4%B8%80%E7%AF%87-Leanote%E8%87%AA%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/","tags":["Leanote","建站"],"title":"建站第一篇 Leanote自建服务器"},{"categories":null,"contents":"About Me Huabing Zhao is a software architect, an Istio Member and an ONAP PTL. He has a solid experience in the information and telecommunication technology industry for more than 17 years.\nThroughout his career, he has built a number of large-scale, cross-country software systems, most of them are still running in production.\nHe loves open source and has been contributing to various open source projects, he is a member of Istio, previous PTL of ONAP, the author of the Hugo clean-white theme and the open source project Aeraki Mesh.\nHe also has strong interests in various technical topics such as Cloud Native, Artificial Intelligence, Cryptocurrencies, Smart Home, etc. He love sharing his ideas about these things in his blog.\nHuabing holds a BSc in Computer Science and Technology from Chongqing University in China.\nCurrently, Huabing works as a senior engineer at Tencent Cloud and also wears the hat of PTL in ONAP open source project. For now, his main focus is to build a managed service mesh solution on cloud.\nWhile he is free, he likes writing technical blog posts, watching movies, swimming, hiking, travelling and learning languages.\nFeel free to connect Huabing at Github and Linkedin, leave your thoughts in his blog or share your ideas by writing him an email.\nPublications    Title Type Publisher Link     Istio Service Mesh Advanced Practical Book 电子工业出版社 Buy now   Distributed Tracing with Jaeger, Kubernetes, and Istio Live Project Manning 30% off   Cloud Native Data Center Networking Translation 中国电力出版社 Buy now   Istio Operation Bible ebook  Read online    Presentations (Selected)    Year City Conference Title Slides Video     2022 Virtual IstioCon Tencent Music’s service mesh practice with Istio and Aeraki slides Video   2022 Virtual A2M 全栈服务网格 - Aeraki Mesh 助你在 Istio 服务网格中管理任何七层流量 slides    2022 Virtual 云原生正发声 Areaki Mesh 在 2022 冬奥会视频直播应用中的服务网格实践 Slides Video   2021 Virtual IstioCon How to manage any layer-7 traffic in an Istio service mesh? Slides Video   2020 Virtual CNBPS Istio 流量管理原理与协议扩展 Slides Video   2019 Chengdu Service Mesher Meetup What Can Service Mesh Learn From SDN? Slides Video   2019 Xi\u0026rsquo;an ONAP Workshop Service Mesh Practice with 5G Management System Slides    2018 Nanjing GNTC Service Mesh in Action with ONAP     2017 Santa Clara NAP Developer Forum MSB to Support Carrier Grade ONAP Microservice Architecture with Service Mesh Slides    2017 Santa Clara ONS Microservice Powered Orchestration Slides    2017 New Jersey ONAP Developer Event MSB Technical Deep Dive and ONAP Use Cases Slides    2017 Paris ONAP Developer Event Microservice Bus Tutorial Slides     Open Source Projects    Project Role Website GitHub     Aeraki Mesh Creator https://aeraki.net http://github.com/aeraki-mesh   Istio Contributor https://istio.io https://github.com/istio/istio   Envoy Contributor https://www.envoyproxy.io https://github.com/envoyproxy/envoy   ONAP PTL https://www.onap.org    hugo-theme-cleanwhite Creator https://themes.gohugo.io/themes/hugo-theme-cleanwhite https://github.com/zhaohuabing/hugo-theme-cleanwhite    ","permalink":"https://deewooo.github.io/about/","tags":null,"title":""},{"categories":null,"contents":"Go 语言学习笔记 Envoy 学习笔记 ","permalink":"https://deewooo.github.io/notes/","tags":null,"title":""},{"categories":null,"contents":"","permalink":"https://deewooo.github.io/search/placeholder/","tags":null,"title":""},{"categories":null,"contents":"","permalink":"https://deewooo.github.io/archive/","tags":null,"title":"Posts Archive"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","permalink":"https://deewooo.github.io/search/","tags":null,"title":"Search Results"}]